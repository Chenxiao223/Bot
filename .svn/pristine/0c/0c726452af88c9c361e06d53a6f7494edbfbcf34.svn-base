package com.zhiziyun.dmptest.bot.ui.fragment;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.graphics.Paint;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.DatePicker;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;

import com.google.gson.Gson;
import com.scwang.smartrefresh.layout.SmartRefreshLayout;
import com.scwang.smartrefresh.layout.api.RefreshLayout;
import com.scwang.smartrefresh.layout.listener.OnLoadmoreListener;
import com.scwang.smartrefresh.layout.listener.OnRefreshListener;
import com.zhiziyun.dmptest.bot.R;
import com.zhiziyun.dmptest.bot.entity.Advertising;
import com.zhiziyun.dmptest.bot.ui.activity.AdvertisingActivity;
import com.zhiziyun.dmptest.bot.ui.activity.OriginalityListActivity;
import com.zhiziyun.dmptest.bot.util.BaseUrl;
import com.zhiziyun.dmptest.bot.util.CHScrollView_fragment;
import com.zhiziyun.dmptest.bot.util.ClickUtils;
import com.zhiziyun.dmptest.bot.util.CustomDialog;
import com.zhiziyun.dmptest.bot.util.DoubleDatePickerDialog;
import com.zhiziyun.dmptest.bot.util.MyDialog;
import com.zhiziyun.dmptest.bot.util.ToastUtils;
import com.zhiziyun.dmptest.bot.util.Token;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;


/**
 * 投广告
 */
public class AdvertisingFragment extends Fragment implements View.OnClickListener {
    private ListView mListView;
    public HorizontalScrollView mTouchView;
    //装入所有的HScrollView
    protected List<CHScrollView_fragment> mHScrollViews = new ArrayList<>();
    private SmartRefreshLayout smartRefreshLayout;
    private String beginTime, endTime;
    private SharedPreferences share;
    private Advertising advertising;
    private List<Map<String, Object>> datas = new ArrayList<Map<String, Object>>();
    private Map<String, Object> data = null;
    private int pageNum = 1;
    private SimpleAdapter adapter;
    private TextView et_text;
    private MyDialog dialog;
    private LinearLayout line_page;
    private boolean m_flag = false;
    private ImageView iv_picture;

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_advertising, container, false);
    }

    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        initView();
    }

    //当滑到当前碎片时调用该方法
    @Override
    public void setUserVisibleHint(boolean isVisibleToUser) {
        super.setUserVisibleHint(isVisibleToUser);
        if (isVisibleToUser) {
            if (ClickUtils.isFastClick()) {//防止快速切换而闪退
                try {
                    //这里与下拉刷新代码一样
                    clearAllData();
                    getData(pageNum, et_text.getText().toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public void initView() {
        dialog = MyDialog.showDialog(getActivity());
        share = getActivity().getSharedPreferences("logininfo", Context.MODE_PRIVATE);
        line_page = getView().findViewById(R.id.line_page).findViewById(R.id.line_page);
        line_page.setOnClickListener(this);
        iv_picture = getView().findViewById(R.id.iv_picture);
        getView().findViewById(R.id.iv_Advertising).setOnClickListener(this);
        smartRefreshLayout = getView().findViewById(R.id.refreshLayout);
        CHScrollView_fragment headerScroll = getView().findViewById(R.id.item_scroll_title);
        headerScroll.setFragment(this);
        getView().findViewById(R.id.iv_date).setOnClickListener(this);
        beginTime = gettodayDate();
        endTime = beginTime;
        et_text = getView().findViewById(R.id.et_text);
        //点击搜索键的监听
        et_text.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView textView, int actionId, KeyEvent keyEvent) {
                if (actionId == EditorInfo.IME_ACTION_SEARCH) {
                    // 先隐藏键盘
                    ((InputMethodManager) et_text.getContext().getSystemService(Context.INPUT_METHOD_SERVICE))
                            .hideSoftInputFromWindow(
                                    getActivity()
                                            .getCurrentFocus()
                                            .getWindowToken(),
                                    InputMethodManager.HIDE_NOT_ALWAYS);
                    //以下是搜索逻辑
                    clearAllData();
                    getData(pageNum, et_text.getText().toString());
                    return true;
                }
                return false;
            }
        });
        //添加头滑动事件
        mHScrollViews.add(headerScroll);
        mListView = getView().findViewById(R.id.scroll_list);
        adapter = new ScrollAdapter(getActivity(), datas, R.layout.chscrollview_item
                , new String[]{"title", "data_1", "data_2", "data_3", "data_4", "data_5", "data_6",
                "data_7", "data_8", "data_9", "data_10", "data_11",}
                , new int[]{R.id.item_title
                , R.id.item_data1
                , R.id.item_data2
                , R.id.item_data3
                , R.id.item_data4
                , R.id.item_data5
                , R.id.item_data6
                , R.id.item_data7
                , R.id.item_data8
                , R.id.item_data9
                , R.id.item_data10
                , R.id.item_data11});
        mListView.setAdapter(adapter);

        //下拉刷新
        smartRefreshLayout.setOnRefreshListener(new OnRefreshListener() {
            @Override
            public void onRefresh(RefreshLayout refreshlayout) {
                try {
                    clearAllData();
                    getData(pageNum, et_text.getText().toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        //上拉加载
        smartRefreshLayout.setOnLoadmoreListener(new OnLoadmoreListener() {
            @Override
            public void onLoadmore(RefreshLayout refreshlayout) {
                try {
                    if ((advertising.getResponse().getTotal() - (pageNum - 1) * 10) > 0) {
                        getData(pageNum, "");
                        ToastUtils.showShort(getActivity(), pageNum + "/" + ((advertising.getResponse().getTotal() / 10) + 1));
                    } else {
                        ToastUtils.showShort(getActivity(), "最后一页了");
                        smartRefreshLayout.finishLoadmore(0);//停止刷新
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        getData(1, "");
    }

    //获取当天的日期
    public String gettodayDate() {
        Date d = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        return sdf.format(d);
    }

    public void getData(final int page, final String name) {
        //广告活动查询接口
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    JSONObject jsonObject = new JSONObject();
                    jsonObject.put("siteId", share.getString("siteid", ""));
                    jsonObject.put("activityName", name);
                    jsonObject.put("startDate", beginTime);
                    jsonObject.put("endDate", endTime);
                    jsonObject.put("page", page);
                    jsonObject.put("rows", 10);
                    OkHttpClient okHttpClient = new OkHttpClient();
                    String url = null;
                    try {
                        url = "agentid=1&token=" + URLEncoder.encode(Token.gettoken(), "utf-8") + "&json=" + jsonObject.toString();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
                    RequestBody body = RequestBody.create(mediaType, url);
                    final Request request = new Request.Builder()
                            .url(BaseUrl.BaseZhang + "api/activityApp/getCreativeActivity")
                            .post(body)
                            .addHeader("content-type", "application/x-www-form-urlencoded")
                            .build();
                    okHttpClient.newCall(request).enqueue(new Callback() {
                        @Override
                        public void onFailure(Call call, IOException e) {

                        }

                        @Override
                        public void onResponse(Call call, Response response) throws IOException {
                            try {
                                String str = response.body().string();
                                Gson gson = new Gson();
                                advertising = gson.fromJson(str, Advertising.class);
                                if (advertising != null) {
                                    handler.sendEmptyMessage(1);//通知刷新适配器
                                } else {
                                    handler.sendEmptyMessage(2);
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }

    public void advertising(final String activityId, final int activityStatus) {
        //广告投放接口
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    final JSONObject jsonObject = new JSONObject();
                    jsonObject.put("siteId", share.getString("siteid", ""));
                    jsonObject.put("activityId", activityId);
                    jsonObject.put("activityStatus", activityStatus);
                    OkHttpClient okHttpClient = new OkHttpClient();
                    String url = null;
                    try {
                        url = "agentid=1&token=" + URLEncoder.encode(Token.gettoken(), "utf-8") + "&json=" + jsonObject.toString();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
                    RequestBody body = RequestBody.create(mediaType, url);
                    final Request request = new Request.Builder()
                            .url(BaseUrl.BaseZhang + "api/activityApp/deliveryCreativeActivity")
                            .post(body)
                            .addHeader("content-type", "application/x-www-form-urlencoded")
                            .build();
                    okHttpClient.newCall(request).enqueue(new Callback() {
                        @Override
                        public void onFailure(Call call, IOException e) {

                        }

                        @Override
                        public void onResponse(Call call, Response response) throws IOException {
                            try {
                                JSONObject json = new JSONObject(response.body().string());
                                if (json.get("status").toString().equals("true")) {
                                    handler.sendEmptyMessage(3);
                                } else {
                                    String str = json.get("errormsg").toString();
                                    Message msg = new Message();
                                    msg.what = 4;
                                    msg.obj = str;
                                    handler.sendMessage(msg);
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    });
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }

    Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case 1:
                    try {
                        if (advertising.isStatus()) {
                            if (advertising.getResponse().getTotal() == 0) {
//                            ToastUtils.showShort(getActivity(), "无数据");
                                smartRefreshLayout.finishLoadmore(0);//停止刷新
                                smartRefreshLayout.finishRefresh(0);
                                line_page.setVisibility(View.VISIBLE);
                                dialog.dismiss();
                            } else {
                                for (int i = 0; i < advertising.getResponse().getData().size(); i++) {
                                    data = new HashMap<String, Object>();
                                    data.put("title", advertising.getResponse().getData().get(i).getActivityName());//名称
                                    data.put("data_" + 1, advertising.getResponse().getData().get(i).getExposure());//曝光
                                    data.put("data_" + 2, advertising.getResponse().getData().get(i).getClick());//点击
                                    data.put("data_" + 3, advertising.getResponse().getData().get(i).getClickRate() + "%");//点击率
                                    data.put("data_" + 4, advertising.getResponse().getData().get(i).getCpm());//cmp
                                    data.put("data_" + 5, advertising.getResponse().getData().get(i).getCpc());//cpc
                                    data.put("data_" + 6, advertising.getResponse().getData().get(i).getSpend());//花费
                                    data.put("data_" + 7, advertising.getResponse().getData().get(i).getDailyBudget());//日预算
                                    data.put("data_" + 8, advertising.getResponse().getData().get(i).getActivityOfferType());//出价方式
                                    data.put("data_" + 9, advertising.getResponse().getData().get(i).getActivityOffer());//出价
                                    String state = advertising.getResponse().getData().get(i).getActivityStatus();
                                    data.put("data_" + 10, state);//状态
                                    data.put("data_" + 11, "编辑");//操作
                                    if (state.equals("已结束")) {
                                        data.put("issend", false);
                                    } else {
                                        data.put("issend", true);
                                    }
                                    data.put("creativeId", advertising.getResponse().getData().get(i).getActivityId());
                                    datas.add(data);
                                }
                                adapter.notifyDataSetChanged();
                                pageNum++;
                                smartRefreshLayout.finishLoadmore(0);//停止刷新
                                line_page.setVisibility(View.GONE);
                                dialog.dismiss();
                            }
                        } else {
                            ToastUtils.showShort(getActivity(), advertising.getErrormsg());
                            smartRefreshLayout.finishLoadmore(0);//停止刷新
                            smartRefreshLayout.finishRefresh(0);
                            dialog.dismiss();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    break;
                case 2:
//                    ToastUtils.showShort(getActivity(), "无数据");
                    smartRefreshLayout.finishLoadmore(0);//停止刷新
                    smartRefreshLayout.finishRefresh(0);
                    line_page.setVisibility(View.VISIBLE);
                    dialog.dismiss();
                    break;
                case 3:
                    try {
                        //成功之后刷新下数据
                        ToastUtils.showShort(getActivity(), "操作成功");
                        clearAllData();
                        getData(pageNum, et_text.getText().toString());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    break;
                case 4:
                    String str = msg.obj.toString();
                    ToastUtils.showShort(getActivity(), str);
                    break;
            }
        }
    };

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.iv_Advertising:
                startActivity(new Intent(getActivity(), AdvertisingActivity.class));
                break;
            case R.id.iv_date:
                try {
                    Calendar c = Calendar.getInstance();
                    // 最后一个false表示不显示日期，如果要显示日期，最后参数可以是true或者不用输入
                    new DoubleDatePickerDialog(getActivity(), 0, new DoubleDatePickerDialog.OnDateSetListener() {

                        @Override
                        public void onDateSet(DatePicker startDatePicker, int startYear, int startMonthOfYear,
                                              int startDayOfMonth, DatePicker endDatePicker, int endYear, int endMonthOfYear,
                                              int endDayOfMonth) {
                            String textString = String.format("%d-%d-%d %d-%d-%d", startYear,
                                    startMonthOfYear + 1, startDayOfMonth, endYear, endMonthOfYear + 1, endDayOfMonth);
                            int index = textString.indexOf(" ");
                            beginTime = date(textString.substring(0, index));
                            endTime = date(textString.substring(index + 1, textString.length()));
                            clearAllData();
                            //加载动画
                            dialog.show();
                            getData(pageNum, "");
                        }
                    }, c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DATE), true).show();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                break;
            case R.id.line_page:
                try {
                    if (ClickUtils.isFastClick()) {
                        clearAllData();
                        getData(pageNum, et_text.getText().toString());
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                break;
        }
    }

    public String date(String date) {
        int index1 = date.indexOf("-");
        int index2 = index1 + date.substring(date.indexOf("-") + 1).indexOf("-") + 1;
        String year = date.substring(0, index1);
        String month = date.substring(index1 + 1, index2).length() == 1 ? "0" + date.substring(index1 + 1, index2) : date.substring(index1 + 1, index2);
        String day = date.substring(index2 + 1).length() == 1 ? "0" + date.substring(index2 + 1) : date.substring(index2 + 1);
        return year + "-" + month + "-" + day;
    }

    //清空所有数据
    public void clearAllData() {
        try {
            datas.clear();
            data.clear();
            pageNum = 1;
            advertising = null;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void addHViews(final CHScrollView_fragment hScrollView) {
        hScrollView.setFragment(this);
        if (!mHScrollViews.isEmpty()) {
            int size = mHScrollViews.size();
            CHScrollView_fragment scrollView = mHScrollViews.get(size - 1);
            final int scrollX = scrollView.getScrollX();
            //第一次满屏后，向下滑动，有一条数据在开始时未加入
            if (scrollX != 0) {
                mListView.post(new Runnable() {
                    @Override
                    public void run() {
                        //当listView刷新完成之后，把该条移动到最终位置
                        hScrollView.scrollTo(scrollX, 0);
                    }
                });
            }
        }
        mHScrollViews.add(hScrollView);
    }

    public void onScrollChanged(int l, int t, int oldl, int oldt) {
        if (l == 0) {
            iv_picture.setVisibility(View.VISIBLE);
        } else {
            iv_picture.setVisibility(View.GONE);
        }
        for (CHScrollView_fragment scrollView : mHScrollViews) {
            //防止重复滑动
            if (mTouchView != scrollView) {
                scrollView.smoothScrollTo(l, t);
            }
        }
    }

    class ScrollAdapter extends SimpleAdapter {

        private List<? extends Map<String, ?>> datas;
        private int res;
        private String[] from;
        private int[] to;
        private Context context;

        public ScrollAdapter(Context context,
                             List<? extends Map<String, ?>> data, int resource,
                             String[] from, int[] to) {
            super(context, data, resource, from, to);
            this.context = context;
            this.datas = data;
            this.res = resource;
            this.from = from;
            this.to = to;
        }

        @Override
        public View getView(final int position, View convertView, ViewGroup parent) {
            View v = convertView;
            if (v == null) {
                v = LayoutInflater.from(context).inflate(res, null);
                //第一次初始化的时候装进来
                addHViews((CHScrollView_fragment) v.findViewById(R.id.item_scroll));
                View[] views = new View[to.length];
                for (int i = 0; i < to.length; i++) {
                    View tv = v.findViewById(to[i]);
//                    tv.setOnClickListener(clickListener);
                    views[i] = tv;
                }
                v.setTag(views);
            }

            //点击状态
            TextView item_state = v.findViewById(R.id.item_data10);
            item_state.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        switch (datas.get(position).get("data_10").toString()) {
                            case "投放中":
                                //点击弹出对话框
                                final CustomDialog customDialog = new CustomDialog(getActivity());
                                customDialog.setTitle("消息提示");
                                customDialog.setMessage("是否暂停广告投放？");
                                customDialog.setYesOnclickListener("确定", new CustomDialog.onYesOnclickListener() {
                                    @Override
                                    public void onYesClick() {
                                        String creativeId = datas.get(position).get("creativeId").toString();
                                        advertising(creativeId, 0);
                                        customDialog.dismiss();
                                    }
                                });
                                customDialog.setNoOnclickListener("取消", new CustomDialog.onNoOnclickListener() {
                                    @Override
                                    public void onNoClick() {
                                        customDialog.dismiss();
                                    }
                                });
                                customDialog.show();
                                break;
                            case "未投放":
                                //点击弹出对话框
                                final CustomDialog customDialog2 = new CustomDialog(getActivity());
                                customDialog2.setTitle("消息提示");
                                customDialog2.setMessage("是否开启广告投放？");
                                customDialog2.setYesOnclickListener("确定", new CustomDialog.onYesOnclickListener() {
                                    @Override
                                    public void onYesClick() {
                                        String creativeId = datas.get(position).get("creativeId").toString();
                                        advertising(creativeId, 1);
                                        customDialog2.dismiss();
                                    }
                                });
                                customDialog2.setNoOnclickListener("取消", new CustomDialog.onNoOnclickListener() {
                                    @Override
                                    public void onNoClick() {
                                        customDialog2.dismiss();
                                    }
                                });
                                customDialog2.show();
                                break;
                            case "暂停":
                                //点击弹出对话框
                                final CustomDialog customDialog3 = new CustomDialog(getActivity());
                                customDialog3.setTitle("消息提示");
                                customDialog3.setMessage("是否开启广告投放？");
                                customDialog3.setYesOnclickListener("确定", new CustomDialog.onYesOnclickListener() {
                                    @Override
                                    public void onYesClick() {
                                        String creativeId = datas.get(position).get("creativeId").toString();
                                        advertising(creativeId, 1);
                                        customDialog3.dismiss();
                                    }
                                });
                                customDialog3.setNoOnclickListener("取消", new CustomDialog.onNoOnclickListener() {
                                    @Override
                                    public void onNoClick() {
                                        customDialog3.dismiss();
                                    }
                                });
                                customDialog3.show();
                                break;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        //数据没刷出来点击会报错
                        ToastUtils.showShort(getActivity(), "操作频率过快");
                    }
                }
            });

            //点击名称
            TextView item_title = v.findViewById(R.id.item_title);
            item_title.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        Intent it = new Intent(getActivity(), OriginalityListActivity.class);
                        it.putExtra("activityId", String.valueOf(datas.get(position).get("creativeId")));
                        startActivity(it);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });

            //点击编辑
            TextView item_data11 = v.findViewById(R.id.item_data11);
            item_data11.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        Intent intent = new Intent(getActivity(), AdvertisingActivity.class);
                        intent.putExtra("creativeId", datas.get(position).get("creativeId") + "");
                        startActivity(intent);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });

            View[] holders = (View[]) v.getTag();
            int len = holders.length;
            try {
                for (int i = 0; i < len; i++) {
                    try {
                        if (i == 10) {
                            if ((Boolean) datas.get(position).get("issend")) {
                                ((TextView) holders[i]).setTextColor(Color.parseColor("#247ab7"));
                                ((TextView) holders[i]).getPaint().setFlags(Paint.UNDERLINE_TEXT_FLAG);//加下滑线
                            } else {
                                ((TextView) holders[i]).setTextColor(Color.parseColor("#555555"));
                                ((TextView) holders[i]).getPaint().setFlags(Paint.EMBEDDED_BITMAP_TEXT_FLAG);
                            }
                        }
                        ((TextView) holders[i]).setText(this.datas.get(position).get(from[i]).toString());
                    } catch (Exception e) {
                        e.printStackTrace();
                        ToastUtils.showShort(context, "未知错误");
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            //让listview交替变色
            if (position % 2 == 0) {
                //偶数
                v.setBackgroundColor(Color.parseColor("#f4f5f7"));
            } else {
                //奇数
                v.setBackgroundColor(Color.parseColor("#ffffff"));
            }

            return v;
        }
    }

}
