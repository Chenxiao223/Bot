package com.zhiziyun.dmptest.bot.ui.fragment;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.LinearLayout;
import android.widget.ListView;

import com.google.gson.Gson;
import com.scwang.smartrefresh.layout.SmartRefreshLayout;
import com.scwang.smartrefresh.layout.api.RefreshLayout;
import com.scwang.smartrefresh.layout.listener.OnLoadmoreListener;
import com.scwang.smartrefresh.layout.listener.OnRefreshListener;
import com.zhiziyun.dmptest.bot.R;
import com.zhiziyun.dmptest.bot.adapter.CrowdAdapter;
import com.zhiziyun.dmptest.bot.entity.CrowdInfo;
import com.zhiziyun.dmptest.bot.entity.CrowdList;
import com.zhiziyun.dmptest.bot.ui.activity.AddCorwdActivity;
import com.zhiziyun.dmptest.bot.ui.activity.CrowdDetailsActivity;
import com.zhiziyun.dmptest.bot.util.BaseUrl;
import com.zhiziyun.dmptest.bot.util.ToastUtils;
import com.zhiziyun.dmptest.bot.util.Token;

import org.json.JSONObject;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * Created by Administrator on 2018/4/3.
 * 人群
 */

public class CrowdFragment extends Fragment implements View.OnClickListener {
    public static CrowdFragment crowdFragment;
    private ListView lv_crowd;
    private SharedPreferences share;
    private HashMap<String, Object> hm_crowd;
    public ArrayList<HashMap<String, Object>> list_crowd = new ArrayList<>();
    public CrowdAdapter adapter;
    private SmartRefreshLayout smartRefreshLayout;
    private LinearLayout line_page;
    private int pageNum = 1;
    private CrowdList crowdList;

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_crowd, container, false);
    }

    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        //
        crowdFragment = this;
        initView();
    }

    private void initView() {
        lv_crowd = getView().findViewById(R.id.lv_crowd);
        smartRefreshLayout = (SmartRefreshLayout) getView().findViewById(R.id.refreshLayout);
        line_page = getView().findViewById(R.id.line_page).findViewById(R.id.line_page);
        line_page.setOnClickListener(this);

        share = getActivity().getSharedPreferences("logininfo", Context.MODE_PRIVATE);
        getView().findViewById(R.id.iv_addcrowd).setOnClickListener(this);
        smartRefreshLayout = (SmartRefreshLayout) getView().findViewById(R.id.refreshLayout);

        adapter = new CrowdAdapter(getActivity(), list_crowd);
        lv_crowd.setAdapter(adapter);

        adapter.setOnClick(new CrowdAdapter.OnClick() {
            @Override
            public void setInfo(String id, int position) {
                Intent it = new Intent(getActivity(), CrowdDetailsActivity.class);
                it.putExtra("id", id);
                it.putExtra("siteId", share.getString("siteid", ""));
                startActivity(it);
            }
        });

        //下拉刷新
        smartRefreshLayout.setOnRefreshListener(new OnRefreshListener() {
            @Override
            public void onRefresh(RefreshLayout refreshlayout) {
                try {
                    clearAllData();
                    getData(pageNum);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
        //上拉加载
        smartRefreshLayout.setOnLoadmoreListener(new OnLoadmoreListener() {
            @Override
            public void onLoadmore(RefreshLayout refreshlayout) {
                try {
                    if ((crowdList.getTotal() - (pageNum - 1) * 10) > 0) {
                        getData(pageNum);
                    } else {
                        ToastUtils.showShort(getActivity(), "最后一页了");
                        smartRefreshLayout.finishLoadmore(0);//停止刷新
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        getData(pageNum);
    }

    private void clearAllData() {
        try {
            hm_crowd.clear();
            list_crowd.clear();
            pageNum = 1;
            crowdList = null;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.line_page:
                try {
                    clearAllData();
                    getData(pageNum);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                break;
            case R.id.iv_addcrowd:
                startActivity(new Intent(getActivity(), AddCorwdActivity.class));
                break;
        }
    }

    public void getData(final int pageNum) {
        //获取到店人群列表
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    final JSONObject json = new JSONObject();
                    json.put("siteId", share.getString("siteid", ""));
                    json.put("page", pageNum);
                    json.put("rows", 10);
                    OkHttpClient client = new OkHttpClient();
                    String url = null;
                    try {
                        url = "agentId=1&token=" + URLEncoder.encode(Token.gettoken(), "utf-8") + "&json=" + json.toString();
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                    MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
                    RequestBody body = RequestBody.create(mediaType, url);
                    final Request request = new Request.Builder()
                            .url(BaseUrl.BaseWang + "deviceSegmentInfo/list.action")
                            .post(body)
                            .addHeader("content-type", "application/x-www-form-urlencoded")
                            .build();

                    client.newCall(request).enqueue(new Callback() {
                        @Override
                        public void onFailure(Call call, IOException e) {

                        }

                        @Override
                        public void onResponse(Call call, Response response) throws IOException {
                            try {
                                Gson gson = new Gson();
                                crowdList = gson.fromJson(response.body().string(), CrowdList.class);
                                Message message = new Message();
                                message.what = 1;
                                message.obj = crowdList;
                                handler.sendMessage(message);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    });

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }

    Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case 1:
                    CrowdList cl = (CrowdList) msg.obj;
                    if (cl.getTotal() == 0) {
                        ToastUtils.showShort(getActivity(), "无数据");
                        line_page.setVisibility(View.VISIBLE);
                        smartRefreshLayout.finishRefresh(0);//停止刷新
                        smartRefreshLayout.finishLoadmore(0);//停止加载
                    } else {
                        for (int i = 0; i < cl.getRows().size(); i++) {
                            hm_crowd = new HashMap<>();
                            hm_crowd.put("content1", cl.getRows().get(i).getName());
                            hm_crowd.put("content2", cl.getRows().get(i).getCreateTime());
                            hm_crowd.put("content3", cl.getRows().get(i).isHasTranForPhone());
                            hm_crowd.put("id", cl.getRows().get(i).getId());
                            list_crowd.add(hm_crowd);
                        }
                        pageNum++;
                        line_page.setVisibility(View.GONE);
                        adapter.notifyDataSetChanged();
                        smartRefreshLayout.finishRefresh(0);//停止刷新
                        smartRefreshLayout.finishLoadmore(0);//停止加载
                    }
                    break;
                case 2:
                    break;
            }
        }
    };
}
