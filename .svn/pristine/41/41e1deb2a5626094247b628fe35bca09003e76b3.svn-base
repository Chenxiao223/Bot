package com.zhiziyun.dmptest.bot.ui.activity;

import android.Manifest;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v4.content.FileProvider;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.View;

import android.widget.ImageView;
import android.widget.LinearLayout;

import android.widget.Toast;


import com.zhiziyun.dmptest.bot.R;
import com.zhiziyun.dmptest.bot.mode.originality.UploadCase;
import com.zhiziyun.dmptest.bot.mode.originality.Uploadmaterialcase;
import com.zhiziyun.dmptest.bot.mode.originality.uploadmaterial.BCreateDetailResult;
import com.zhiziyun.dmptest.bot.mode.originality.uploadmaterial.MaterialAdapter;
import com.zhiziyun.dmptest.bot.mode.originality.uploadmaterial.TemplatePackageAddItems;
import com.zhiziyun.dmptest.bot.network.subscriber.PureSubscriber;
import com.zhiziyun.dmptest.bot.util.BaseUrl;
import com.zhiziyun.dmptest.bot.util.BitmapUtil;
import com.zhiziyun.dmptest.bot.util.BitmapUtils;
import com.zhiziyun.dmptest.bot.util.DateUtil;
import com.zhiziyun.dmptest.bot.util.IsEmpty;
import com.zhiziyun.dmptest.bot.util.MyDialog;
import com.zhiziyun.dmptest.bot.util.PhotoUtils2;
import com.zhiziyun.dmptest.bot.util.ToastUtils;
import com.zhiziyun.dmptest.bot.util.Token;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;


/**
 * Created by Administrator on 2018/7/11.
 * 上传素材
 */

public class UploadMaterialActivity extends BaseActivity implements View.OnClickListener, MaterialAdapter.ItemClickListener, MaterialAdapter.ItemClickDataListener<List<TemplatePackageAddItems>> {
    private static final int CODE_GALLERY_REQUEST = 0xa0;
    private static final int STORAGE_PERMISSIONS_REQUEST_CODE = 0x04;
    private Uri cropImageUri;
    private Bitmap bitmap = null;
    private int flag_iv = 0;//区分改变哪张图
    private static final int OUTPUT_X = 300;
    private static final int OUTPUT_Y = 300;
    private static final int CODE_RESULT_REQUEST = 0xa2;
    private String mTemplatePackageId;
    private List<TemplatePackageAddItems> mList;
    private List<TemplatePackageAddItems> mTotal;
    private RecyclerView mMaterialRv;
    private MaterialAdapter mMaterialAdapter;
    private int mCurrentPosition = 0;
    private List<MultipartBody.Part> mMap;
    private SharedPreferences share;
    private String mNewUri;
    private MyDialog mDialog;
    private File fileUri;
    private Uri imageUri;

    private static final int WRITE_PERMISSION = 0x01;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_upload_material);
        mTemplatePackageId = getIntent().getStringExtra("templatePackageId");
        initView();
    }

    private void initView() {
        //设置系统栏颜色
        ImageView iv_system = (ImageView) findViewById(R.id.iv_system);
        LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) iv_system.getLayoutParams();
        params.height = (int) getStatusBarHeight(this);//设置当前控件布局的高度

        findViewById(R.id.tv_back).setOnClickListener(this);
        share = getSharedPreferences("logininfo", Context.MODE_PRIVATE);
        mMap = new ArrayList<>();
        mMaterialRv = findViewById(R.id.material_rv);
        getData();
    }

    /**
     * 动态申请sdcard读写权限
     */
    private void autoObtainStoragePermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, STORAGE_PERMISSIONS_REQUEST_CODE);
            } else {
                PhotoUtils2.openPic(this, CODE_GALLERY_REQUEST);
            }
        } else {
            PhotoUtils2.openPic(this, CODE_GALLERY_REQUEST);
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode) {
            //调用系统相册申请Sdcard权限回调
            case STORAGE_PERMISSIONS_REQUEST_CODE:
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    PhotoUtils2.openPic(this, CODE_GALLERY_REQUEST);
                } else {
                    ToastUtils.showShort(this, "请允许操作SDCard！！");
                }
                break;
            default:
        }
    }

    /**
     * 获取精确到秒的时间戳
     *
     * @return
     */
    public static int getSecondTimestamp(Date date) {
        if (null == date) {
            return 0;
        }
        String timestamp = String.valueOf(date.getTime());
        int length = timestamp.length();
        if (length > 3) {
            return Integer.valueOf(timestamp.substring(0, length - 3));
        } else {
            return 0;
        }
    }


    //bitmap转file
    public static File compressImage(Bitmap bitmap) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos);//质量压缩方法，这里100表示不压缩，把压缩后的数据存放到baos中
        File file = new File(Environment.getExternalStorageDirectory(), getSecondTimestamp(new Date()) + "");
        String filepath = BitmapUtils.compressBitmap(bitmap, file.toString());
        try {
            FileOutputStream fos = new FileOutputStream(BitmapUtil.compressImage(filepath));
            try {
                fos.write(baos.toByteArray());
                fos.flush();
                fos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
//        recycleBitmap(bitmap);
        return file;
    }

    //保存图片路径到List集合里
    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode != RESULT_OK) {
            return;
        }
        switch (requestCode) {
            //相册返回
            case CODE_GALLERY_REQUEST:
                try {
                    Uri newUri = Uri.parse(PhotoUtils2.getPath(this, data.getData()));
//                    7.0向上需适配相册获取真实路径
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                        newUri = FileProvider.getUriForFile(this, getPackageName(), new File(newUri.getPath()));
                    }
                    mList.get(mCurrentPosition).setImagePicture(compressImage(PhotoUtils2.getBitmapFromUri(newUri, this)).toString());
                    mMaterialAdapter.notifyDataSetChanged();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                mMaterialAdapter.notifyItemChanged(mCurrentPosition);
                break;
//            //裁剪返回
//            case CODE_RESULT_REQUEST:
//                 bitmap = PhotoUtils2.getBitmapFromUri(mNewUri, this);
//                        if (bitmap != null) {
//                            PhotoUtils2.cropImageUri(UploadMaterialActivity.this, mNewUri, cropImageUri, 1, 1, OUTPUT_X, OUTPUT_Y, CODE_RESULT_REQUEST);
//                        }
//                break;
            default:
        }

    }

    /**
     * 检查设备是否存在SDCard的工具方法
     */

    public static boolean hasSdcard() {
        String state = Environment.getExternalStorageState();
        return state.equals(Environment.MEDIA_MOUNTED);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.tv_back:
                finish();
                break;
        }
    }

    //请求网络数据
    public void getData() {
        JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put(URLEncoder.encode("templatePackageId", "utf-8"), URLEncoder.encode(mTemplatePackageId, "utf-8"));
            Log.e("OnItemClick: ", jsonObject.toString());
            new Uploadmaterialcase(1, URLEncoder.encode(Token.gettoken(), "utf-8"), jsonObject).execute(new PureSubscriber<BCreateDetailResult>() {
                @Override
                public void onFailure(Throwable throwable) {

                }

                @Override
                public void onSuccess(BCreateDetailResult data) {
                    mList = new ArrayList<TemplatePackageAddItems>();
                    mTotal = new ArrayList<TemplatePackageAddItems>();
                    mTotal = data.getResponse().getTemplatePackageAddItems();
                    List<TemplatePackageAddItems> mImageList = new ArrayList<TemplatePackageAddItems>();
                    List<TemplatePackageAddItems> mTextList = new ArrayList<TemplatePackageAddItems>();
                    for (int i = 0; i < mTotal.size(); i++) {
                        if (mTotal.get(i).getAddItemType().equals("IMAGE")) {
                            mImageList.add(mTotal.get(i));
                        } else {
                            mTextList.add(mTotal.get(i));
                        }
                    }
                    mList.addAll(mImageList);
                    mList.addAll(mTextList);
                    if (mMaterialAdapter == null) {
                        initRecycleView();
                    }
                    mMaterialAdapter.notifyDataSetChanged();
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //初始化recycleview
    public void initRecycleView() {
        mMaterialAdapter = new MaterialAdapter(this, mList);
        mMaterialAdapter.setItemClickListener(this);
        mMaterialAdapter.setItemClickDataListener(this);
        mMaterialRv.setLayoutManager(new LinearLayoutManager(this));
        mMaterialRv.setAdapter(mMaterialAdapter);
    }

    //适配器Item监听刷新
    @Override
    public void OnItemClick(View v, final int position) {
        switch (v.getId()) {
            case R.id.image_ly:
                mCurrentPosition = position;
                autoObtainStoragePermission();
                break;
            case R.id.max_et:
                break;
        }
    }

    //处理成json格式
    @Override
    public void OnItemClick(View v, List<TemplatePackageAddItems> data) {
        JSONObject js = new JSONObject();
        JSONObject jsTotal = new JSONObject();
        try {
            jsTotal.put("siteId", share.getString("siteid", ""));
            jsTotal.put("templatePackageId", mTemplatePackageId);
            for (int i = 0; i < data.size(); i++) {
                if (data.get(i).getAddItemType().equals("TEXT") && !IsEmpty.string(data.get(i).getEditItemText())) {
                    js.put(data.get(i).getAddItemKey(), data.get(i).getEditItemText());
                } else if (data.get(i).getImagePicture() != null && data.get(i).getAddItemType().equals("IMAGE")) {
                    String filepath = data.get(i).getImagePicture();
                    BitmapUtils.compressBitmap(filepath, filepath);
                    File file = new File(filepath);
                    RequestBody requestFile = RequestBody.create(MediaType.parse("multipart/form-data"), file);
                    MultipartBody.Part part = MultipartBody.Part.createFormData(data.get(i).getAddItemKey(), file.getName(), requestFile);
                    mMap.add(part);
                } else {
                    Toast.makeText(this, "图片和文字不能为空", Toast.LENGTH_SHORT).show();
                    return;
                }
            }
            jsTotal.put("templatePackageAddTextParams", js);
            UploadFile(jsTotal, mMap);
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    //上传素材
    public void UploadFile(JSONObject jsonObject, List<MultipartBody.Part> mMap) {
        mDialog = MyDialog.showDialog(this);
        mDialog.show();
        try {
            new UploadCase(1, URLEncoder.encode(Token.gettoken(), "utf-8"), jsonObject, mMap).execute(new PureSubscriber<String>() {
                @Override
                public void onFailure(Throwable throwable) {
                    mDialog.dismiss();
                    Toast.makeText(UploadMaterialActivity.this, "上传失败", Toast.LENGTH_SHORT).show();
                }

                @Override
                public void onSuccess(String data) {
                    mDialog.dismiss();
                    Intent intent = new Intent();
                    intent.putExtra("upload", data);
                    setResult(12, intent);
                    Toast.makeText(UploadMaterialActivity.this, "上传成功", Toast.LENGTH_SHORT).show();
                    finish();
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        finish();
    }

}
