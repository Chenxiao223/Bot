package com.zhiziyun.dmptest.bot.ui.activity;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.IdRes;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;

import com.zhiziyun.dmptest.bot.R;
import com.zhiziyun.dmptest.bot.ui.fragment.MainCrowdFragment;
import com.zhiziyun.dmptest.bot.util.BaseUrl;
import com.zhiziyun.dmptest.bot.util.MyDialog;
import com.zhiziyun.dmptest.bot.util.ToastUtils;
import com.zhiziyun.dmptest.bot.util.Token;

import org.json.JSONObject;

import java.io.IOException;
import java.net.URLEncoder;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * Created by Administrator on 2018/4/4.
 * 人群编辑
 */

public class CrowdEditActivity extends BaseActivity implements View.OnClickListener {
    private EditText et_desc, et_charger, et_user;
    private String m_mark = "";
    private String m_type = "";
    private Intent intent;
    RadioGroup rg_type, rg_mark;
    RadioButton rb_ordinary, rb_low_value, rb_positive, rb_high_value, rb_new_turn, rb_temporarily_not_to, rb_continue_further, rb_submitted;
    private MyDialog dialog;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_crowd_edit);
        initView();
    }

    private void initView() {
        //设置系统栏颜色
        ImageView iv_system = (ImageView) findViewById(R.id.iv_system);
        LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) iv_system.getLayoutParams();
        params.height = (int) getStatusBarHeight(this);//设置当前控件布局的高度

        intent = getIntent();
        rg_type = (RadioGroup) findViewById(R.id.rg_type);
        rg_mark = (RadioGroup) findViewById(R.id.rg_mark);
        rb_ordinary = (RadioButton) findViewById(R.id.rb_ordinary);
        rb_ordinary.setPadding(15, 5, 15, 5);
        rb_ordinary.setBackgroundResource(R.drawable.shape_sel);
        rb_ordinary.setGravity(Gravity.CENTER);

        rb_low_value = (RadioButton) findViewById(R.id.rb_low_value);
        rb_low_value.setPadding(15, 5, 15, 5);
        rb_low_value.setBackgroundResource(R.drawable.shape_sel);
        rb_low_value.setGravity(Gravity.CENTER);

        rb_positive = (RadioButton) findViewById(R.id.rb_positive);
        rb_positive.setPadding(15, 5, 15, 5);
        rb_positive.setBackgroundResource(R.drawable.shape_sel);
        rb_positive.setGravity(Gravity.CENTER);

        rb_high_value = (RadioButton) findViewById(R.id.rb_high_value);
        rb_high_value.setPadding(15, 5, 15, 5);
        rb_high_value.setBackgroundResource(R.drawable.shape_sel);
        rb_high_value.setGravity(Gravity.CENTER);

        rb_new_turn = (RadioButton) findViewById(R.id.rb_new_turn);
        rb_new_turn.setPadding(15, 5, 15, 5);
        rb_new_turn.setBackgroundResource(R.drawable.shape_sel);
        rb_new_turn.setGravity(Gravity.CENTER);

        rb_temporarily_not_to = (RadioButton) findViewById(R.id.rb_temporarily_not_to);
        rb_temporarily_not_to.setPadding(15, 5, 15, 5);
        rb_temporarily_not_to.setBackgroundResource(R.drawable.shape_sel);
        rb_temporarily_not_to.setGravity(Gravity.CENTER);

        rb_continue_further = (RadioButton) findViewById(R.id.rb_continue_further);
        rb_continue_further.setPadding(15, 5, 15, 5);
        rb_continue_further.setBackgroundResource(R.drawable.shape_sel);
        rb_continue_further.setGravity(Gravity.CENTER);

        rb_submitted = (RadioButton) findViewById(R.id.rb_submitted);
        rb_submitted.setPadding(15, 5, 15, 5);
        rb_submitted.setBackgroundResource(R.drawable.shape_sel);
        rb_submitted.setGravity(Gravity.CENTER);

        showState(intent.getStringExtra("type"), intent.getStringExtra("mark"));

        rg_type.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, @IdRes int checkedId) {
                RadioButton checkRadioButton = (RadioButton) group.findViewById(checkedId);
                m_type = checkRadioButton.getText().toString();
            }
        });

        rg_mark.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, @IdRes int checkedId) {
                RadioButton checkRadioButton = (RadioButton) group.findViewById(checkedId);
                m_mark = checkRadioButton.getText().toString();
            }
        });

        et_desc = (EditText) findViewById(R.id.et_desc);
        et_desc.setText(intent.getStringExtra("desc"));
        et_charger = (EditText) findViewById(R.id.et_charger);
        et_charger.setText(intent.getStringExtra("charger"));
        et_user = (EditText) findViewById(R.id.et_user);
        et_user.setText(intent.getStringExtra("name"));

        findViewById(R.id.iv_back).setOnClickListener(this);
        findViewById(R.id.line_page).setOnClickListener(this);
        findViewById(R.id.btn_commit).setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.iv_back:
                finish();
                break;
            case R.id.line_page:
                //让软键盘隐藏
                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                imm.hideSoftInputFromWindow(v.getApplicationWindowToken(), 0);
                break;
            case R.id.btn_commit:
                Edit();
                break;
        }
    }

    public void Edit() {
        dialog = MyDialog.showDialog(CrowdEditActivity.this);
        dialog.show();
        //编辑
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    JSONObject json = new JSONObject();
                    json.put("id", intent.getStringExtra("id"));
                    json.put("mark", getState(m_mark));
                    json.put("desc", et_desc.getText().toString());
                    json.put("charger", et_charger.getText().toString());
                    json.put("name", et_user.getText().toString());
                    json.put("type", getType(m_type));
                    Log.i("infos", json.toString());
                    OkHttpClient client = new OkHttpClient();
                    String url = "agentId=1&token=" + URLEncoder.encode(Token.gettoken(), "utf-8") + "&json=" + json.toString();
                    final MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
                    RequestBody body = RequestBody.create(mediaType, url);
                    Request request = new Request.Builder()
                            .url(BaseUrl.BaseWang + "guestFromProbe/edit.action")
                            .post(body)
                            .addHeader("content-type", "application/x-www-form-urlencoded")
                            .build();

                    client.newCall(request).enqueue(new Callback() {
                        @Override
                        public void onFailure(Call call, IOException e) {

                        }

                        @Override
                        public void onResponse(Call call, Response response) throws IOException {
                            try {
                                JSONObject jsonObject = new JSONObject(response.body().string());
                                if (jsonObject.get("success").toString().equals("true")) {
                                    Message message = new Message();
                                    message.what = 1;
                                    message.obj = jsonObject.get("msg");
                                    handler.sendMessage(message);
                                } else {
                                    Message message = new Message();
                                    message.what = 2;
                                    message.obj = jsonObject.get("msg");
                                    handler.sendMessage(message);
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }

    Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case 1:
                    ToastUtils.showShort(CrowdEditActivity.this, msg.obj.toString());
                    //重新加载页面
                    MainCrowdFragment.fragment.clearAllData();
                    MainCrowdFragment.fragment.getData(1, "");
                    dialog.dismiss();
                    finish();
                    break;
                case 2:
                    ToastUtils.showShort(CrowdEditActivity.this, msg.obj.toString());
                    dialog.dismiss();
                    break;
            }
        }
    };

    public int getState(String str) {
        switch (str) {
            case "新转入":
                return 0;
            case "暂无意向":
                return 1;
            case "持续跟进":
                return 2;
            case "已成交":
                return 3;
        }
        return 0;
    }

    public int getType(String str) {
        switch (str) {
            case "普通客户":
                return 0;
            case "低价值客户":
                return 1;
            case "积极客户":
                return 2;
            case "高价值客户":
                return 3;
        }
        return 0;
    }

    public void showState(String type, String mark) {
        switch (type) {
            case "普通客户":
                rb_ordinary.setChecked(true);
                break;
            case "低价值客户":
                rb_low_value.setChecked(true);
                break;
            case "积极客户":
                rb_positive.setChecked(true);
                break;
            case "高价值客户":
                rb_high_value.setChecked(true);
                break;
        }
        switch (mark) {
            case "新转入":
                rb_new_turn.setChecked(true);
                break;
            case "暂无意向":
                rb_temporarily_not_to.setChecked(true);
                break;
            case "持续跟进":
                rb_continue_further.setChecked(true);
                break;
            case "已成交":
                rb_submitted.setChecked(true);
                break;
        }
    }

}
