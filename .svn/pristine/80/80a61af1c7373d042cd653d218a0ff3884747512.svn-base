package com.zhiziyun.dmptest.bot.ui.activity;

import android.Manifest;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.Settings;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.telephony.TelephonyManager;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.allenliu.versionchecklib.v2.AllenVersionChecker;
import com.allenliu.versionchecklib.v2.builder.UIData;
import com.google.gson.Gson;
import com.zhiziyun.dmptest.bot.BuildConfig;
import com.zhiziyun.dmptest.bot.R;
import com.zhiziyun.dmptest.bot.entity.VersionUpdate;

import com.zhiziyun.dmptest.bot.entity.WifiCrowd;
import com.zhiziyun.dmptest.bot.mode.acount.AccountTypeActivity;
import com.zhiziyun.dmptest.bot.mode.wifi.ChooseStoreActivity;
import com.zhiziyun.dmptest.bot.mode.wifi.WifiAdverActivity;
import com.zhiziyun.dmptest.bot.util.BaseUrl;
import com.zhiziyun.dmptest.bot.util.CustomDialog;
import com.zhiziyun.dmptest.bot.util.MyDialog;
import com.zhiziyun.dmptest.bot.util.NetWorkUtil;
import com.zhiziyun.dmptest.bot.util.NoDoubleClickListener;
import com.zhiziyun.dmptest.bot.util.SelfDialog;
import com.zhiziyun.dmptest.bot.util.ToastUtils;
import com.zhiziyun.dmptest.bot.util.Token;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.IOException;
import java.net.URLEncoder;
import java.util.TimeZone;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.FormBody;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * Created by Administrator on 2017/11/17.
 */

public class LoginActivity extends BaseActivity implements View.OnClickListener {
    private EditText et_username, et_password;
    private LinearLayout traceroute_rootview;
    private SharedPreferences.Editor editors;
    private MyDialog dialog;
    private VersionUpdate versionUpdate;
    private SharedPreferences.Editor editorss;
    private static final int STORAGE_PERMISSIONS_REQUEST_CODE = 0x04;
    private static final int GET_UNKNOWN_APP_SOURCES = 0x05;
    private static final int INSTALL_PACKAGES_REQUESTCODE = 0x06;
    private Boolean Permissions = false;
    private File file;
    private ImageView iv_emal, iv_pwd, image_login;
    private TextView mTv;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);
//        getPermissions();//先获取权限
        initView();

    }


    private void initView() {
        if (!getState()) {
            //第一次进来
            saveState();
            if (Build.VERSION.SDK_INT >= 23) {
                //android6.0以上才执行
                message();
            }
            if (Permissions) {
                String appid = getPackageName();
                //如果既不是智子盒子也不是探客宝就不调用此接口
                if (appid.equals("com.zhiziyun.dmptest.bot")) {
                    startApp(true, "B1tyi0cgW5W");//首次打开应用
                } else if (appid.equals("com.zhiziyun.dmptest.tkb")) {
                    startApp(true, "B1txn0rBNhm");//首次打开应用
                }
            }
        }
        versionUpdate();//版本更新
        //设置系统栏颜色
        ImageView iv_system = (ImageView) findViewById(R.id.iv_system);
        LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) iv_system.getLayoutParams();
        params.height = (int) getStatusBarHeight(this);//设置当前控件布局的高度

        SharedPreferences sharedPreferences = getSharedPreferences("logininfo", Context.MODE_PRIVATE);
        editors = sharedPreferences.edit();

        iv_emal = findViewById(R.id.iv_emal);
        iv_emal.setOnClickListener(this);
        iv_pwd = findViewById(R.id.iv_pwd);
        iv_pwd.setOnClickListener(this);
        et_username = (EditText) findViewById(R.id.edit_username);
        et_password = (EditText) findViewById(R.id.edit_password);
        image_login = (ImageView) findViewById(R.id.image_login);
        et_username.setText(getemail());
        et_username.setSelection(getemail().length());//将光标定位到最后
        et_password.setText(getpassword());
        if (BuildConfig.BASENAME.equals("bot")) {
            image_login.setImageResource(R.drawable.zhiziyunlogo);
        }
        if (BuildConfig.BASENAME.equals("tkb")) {
            image_login.setImageResource(R.drawable.tkbimage);
        }
        if (BuildConfig.BASENAME.equals("yxxcr")) {
            image_login.setImageResource(R.drawable.startyxxcr);
        }
        if (BuildConfig.BASENAME.equals("lkb")) {
            image_login.setImageResource(R.drawable.lkbbg);
        }
        if (BuildConfig.BASENAME.equals("shly")) {
            image_login.setImageResource(R.drawable.shlybg);
        }
        if (BuildConfig.BASENAME.equals("xmgy")) {
            image_login.setImageResource(R.drawable.xmgybg);
        }
        if (BuildConfig.BASENAME.equals("syhz")) {
            image_login.setImageResource(R.drawable.syhzbg);
        }
        if (BuildConfig.BASENAME.equals("jkb")) {
            image_login.setImageResource(R.drawable.jkb_bg);
        }
        if (BuildConfig.BASENAME.equals("xmf")) {
            image_login.setImageResource(R.drawable.xmf_bg);
        }
        if (BuildConfig.BASENAME.equals("emigou")) {
            image_login.setImageResource(R.drawable.xmf_bg);
        }
        if (BuildConfig.BASENAME.equals("marketing")) {
            image_login.setImageResource(R.drawable.marketingbg);
        }
        if (BuildConfig.BASENAME.equals("skl")) {
            image_login.setImageResource(R.drawable.sklbg);
        }
        if (!TextUtils.isEmpty(getemail())) {
            //如果有值就显示
            iv_emal.setVisibility(View.VISIBLE);
        }
        if (!TextUtils.isEmpty(getpassword())) {
            //如果有值就显示
            iv_pwd.setVisibility(View.VISIBLE);
        }
        //监听内容变化
        et_username.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                iv_emal.setVisibility(View.VISIBLE);
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
        //监听内容变化
        et_password.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                iv_pwd.setVisibility(View.VISIBLE);
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
        traceroute_rootview = (LinearLayout) findViewById(R.id.traceroute_rootview);
        traceroute_rootview.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //让软键盘隐藏
                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                imm.hideSoftInputFromWindow(view.getApplicationWindowToken(), 0);
            }
        });
        //点击登录
        findViewById(R.id.btn_login).setOnClickListener(new NoDoubleClickListener() {
            @Override
            public void onMultiClick(View v) {
                try {
                    if (et_username.getText().toString().equals("")) {
                        et_username.setError("账号不能为空！");
                    } else if (et_password.getText().toString().equals("")) {
                        et_password.setError("密码不能为空！");
                    } else {
                        editors.putString("email", et_username.getText().toString());
                        editors.putString("password", et_password.getText().toString());
                        if (Permissions) {
                            String appid = getPackageName();
                            //如果既不是智子盒子也不是探客宝就不调用此接口
                            if (appid.equals("com.zhiziyun.dmptest.bot")) {
                                recordLogin("B1tyi0cgW5W");
                            } else if (appid.equals("com.zhiziyun.dmptest.tkb")) {
                                recordLogin("B1txn0rBNhm");
                            }
                        }
                        Login();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public String getemail() {
        SharedPreferences shared = getSharedPreferences("logininfo", Context.MODE_PRIVATE);
        return shared.getString("email", "");
    }

    public String getpassword() {
        SharedPreferences shared = getSharedPreferences("logininfo", Context.MODE_PRIVATE);
        return shared.getString("password", "");
    }

    public void message() {
        //点击弹出对话框
        final CustomDialog customDialog = new CustomDialog(this);
        customDialog.setTitle("消息提示");
        customDialog.setMessage("为了让您顺利的使用所有功能，请允许打开所需权限，否则需要手动进行设置");
        customDialog.setYesOnclickListener("确定", new CustomDialog.onYesOnclickListener() {
            @Override
            public void onYesClick() {
                getPermissions();
                customDialog.dismiss();
            }
        });
        customDialog.setNoOnclickListener("取消", new CustomDialog.onNoOnclickListener() {
            @Override
            public void onNoClick() {
                getPermissions();
                customDialog.dismiss();
            }
        });
        customDialog.show();
    }

    public void Login() {
        try {
            //加载动画
            dialog = MyDialog.showDialog(this);
            dialog.show();
            //登录
            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        OkHttpClient client = new OkHttpClient();
                        RequestBody body = new FormBody.Builder()
                                .add("email", et_username.getText().toString())
                                .add("password", et_password.getText().toString())
                                .add("appid", getPackageName()).build();
                        final Request request = new Request.Builder()
                                .url(BaseUrl.BaseZhang + "loginuser/login")
                                .post(body)
                                .build();

                        client.newCall(request).enqueue(new Callback() {
                            @Override
                            public void onFailure(Call call, IOException e) {

                            }

                            @Override
                            public void onResponse(Call call, Response response) throws IOException {
                                try {
                                    String str = response.body().string();
                                    JSONObject json = new JSONObject(str);
                                    if (!TextUtils.isEmpty(str)) {
                                        if (json.get("success").toString().equals("true")) {//返回为true表示登录成功
                                            editors.putString("accountid", json.get("accountid").toString());
                                            editors.putString("siteid", json.get("siteid").toString());
                                            editors.putString("company", json.get("company").toString());
                                            editors.putString("logourl", json.get("logourl").toString());
                                            editors.putString("userid", json.get("userid").toString());
                                            editors.putString("userName", et_username.getText().toString());
                                            editors.putBoolean("isAllowOnlinePay", (Boolean) json.get("isAllowOnlinePay"));
                                            editors.putBoolean("isShowPlanAds", (Boolean) json.get("isShowPlanAds"));
                                            editors.putString("tencentid", json.get("tencentid").toString());
                                            editors.putBoolean("isAuthorizationAd", (Boolean) json.get("isAuthorizationAd"));
                                            editors.putBoolean("isBindingWeChatSubscription", (Boolean) json.get("isBindingWeChatSubscription"));
                                            editors.putBoolean("isShowTencent", (Boolean) json.get("isShowTencent"));
                                            editors.putBoolean("isOpenWeChatSubscriptionAdvertiser", (Boolean) json.get("isOpenWeChatSubscriptionAdvertiser"));
                                            editors.putString("wechatSubscriptionName", json.get("wechatSubscriptionName").toString());//微信公众号名称
                                            editors.putString("wechatSubscriptionOriginalId", json.get("wechatSubscriptionOriginalId").toString());//微信公众号原始ID
                                            editors.putBoolean("isApplyUnbind", (Boolean) json.get("isApplyUnbind"));
                                            editors.commit();//提交
                                            startActivity(new Intent(LoginActivity.this, HomePageActivity.class));
                                            finish();
                                            dialog.dismiss();
                                            handler.sendEmptyMessage(5);
                                        } else {
                                            Message msg = new Message();
                                            msg.what = 1;
                                            msg.obj = json.get("msg").toString();
                                            handler.sendMessage(msg);
                                        }
                                    }
                                } catch (Exception e) {
                                    handler.sendEmptyMessage(4);
                                    e.printStackTrace();
                                }

                            }
                        });

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }).start();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case 1:
                    dialog.dismiss();
                    ToastUtils.showShort(LoginActivity.this, msg.obj.toString());
                    break;
                case 2:
                    try {
                        if (versionUpdate.getResponse().isNeedForcedUpdate()) {//是否需要强制更新
                            try {
                                //强制更新没有取消选项
                                final SelfDialog selfDialog = new SelfDialog(LoginActivity.this);
                                selfDialog.setTitle(versionUpdate.getResponse().getTitle());
                                selfDialog.setMessage(versionUpdate.getResponse().getMessage());
                                selfDialog.setYesOnclickListener("确定", new SelfDialog.onYesOnclickListener() {
                                    @Override
                                    public void onYesClick() {
                                        AllenVersionChecker
                                                .getInstance()
                                                .downloadOnly(
                                                        UIData.create().setTitle("消息提示").setContent("是否需要极速下载？取消后将无法更新")
                                                                .setDownloadUrl(versionUpdate.getResponse().getDownloadUrl())
                                                )
                                                .excuteMission(LoginActivity.this);
                                        selfDialog.dismiss();
                                    }
                                });
                                selfDialog.show();
                                selfDialog.setCancelable(false);//禁止点击回退键
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        } else {
                            try {
                                //点击弹出对话框
                                final CustomDialog customDialog = new CustomDialog(LoginActivity.this);
                                customDialog.setTitle(versionUpdate.getResponse().getTitle());
                                customDialog.setMessage(versionUpdate.getResponse().getMessage());
                                customDialog.setYesOnclickListener("确定", new CustomDialog.onYesOnclickListener() {
                                    @Override
                                    public void onYesClick() {
                                        AllenVersionChecker
                                                .getInstance()
                                                .downloadOnly(
                                                        UIData.create().setTitle("消息提示").setContent("是否需要极速下载？取消后将无法更新")
                                                                .setDownloadUrl(versionUpdate.getResponse().getDownloadUrl())
                                                )
                                                .excuteMission(LoginActivity.this);
                                        customDialog.dismiss();
                                    }
                                });
                                customDialog.setNoOnclickListener("取消", new CustomDialog.onNoOnclickListener() {
                                    @Override
                                    public void onNoClick() {
                                        customDialog.dismiss();
                                    }
                                });
                                customDialog.show();
                                customDialog.setCancelable(false);//禁止点击回退键
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    break;
                case 4:
                    dialog.dismiss();
                    break;
                case 5:
                    String appid = getPackageName();
                    //如果既不是智子盒子也不是探客宝就不调用此接口
                    if (appid.equals("com.zhiziyun.dmptest.bot")) {
                        customevent(et_username.getText().toString(), "B1tyi0cgW5W");
                    } else if (appid.equals("com.zhiziyun.dmptest.tkb")) {
                        customevent(et_username.getText().toString(), "B1txn0rBNhm");
                    }
                    break;
            }
        }
    };

    public void recordLogin(final String appid) {
        try {
            //记录用户登录
            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        final JSONObject json = new JSONObject();
                        json.put("siteid", "0zoTLi29XRgq");
                        json.put("zzid", "0zoTLha93ySI");//广告活动编号
                        json.put("appid", appid);//应用编号
                        TelephonyManager telephonyManager = (TelephonyManager) LoginActivity.this.getSystemService(LoginActivity.this.TELEPHONY_SERVICE);
                        String imei = telephonyManager.getDeviceId();
                        json.put("imei", imei);
                        json.put("who", "");//注册用户编号
                        json.put("idfa", "");
                        json.put("idfy", "");
                        json.put("channelid", "");//渠道id
                        json.put("os", 0);//系统安桌是0
                        json.put("appzzid", "0zoTLi29XRgq");
                        OkHttpClient client = new OkHttpClient();
                        String url = null;
                        try {
                            url = json.toString();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
                        RequestBody body = RequestBody.create(mediaType, url);
                        final Request request = new Request.Builder()
                                .url(BaseUrl.BaseJiang + "logup")
                                .addHeader("apiid", "0zoTLi29XRgq")
                                .addHeader("token", URLEncoder.encode(Token.gettoken2(), "utf-8"))
                                .addHeader("content-type", "application/x-www-form-urlencoded")
                                .post(body)
                                .build();

                        client.newCall(request).enqueue(new Callback() {
                            @Override
                            public void onFailure(Call call, IOException e) {
                                Log.i("response", "登录返回：" + e.toString());
                            }

                            @Override
                            public void onResponse(Call call, Response response) throws IOException {
                                Log.i("response", "登录返回：" + response.body().string());
                            }
                        });

                    } catch (Exception e) {
                        Log.i("response", e.toString());
                        e.printStackTrace();
                    }
                }
            }).start();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void versionUpdate() {
        //版本更新
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    final JSONObject json = new JSONObject();
                    json.put("version", BaseUrl.BaseVersion);
                    json.put("device", "android");
                    json.put("appId", getPackageName());
                    OkHttpClient okHttpClient = new OkHttpClient();
                    String url = null;
                    try {
                        url = "agentid=1&token=" + URLEncoder.encode(Token.gettoken(), "utf-8") + "&json=" + json.toString();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
                    RequestBody body = RequestBody.create(mediaType, url);
                    final Request request = new Request.Builder()
                            .url(BaseUrl.BaseZhang + "api/versionApp/checkAppUpdate")
                            .post(body)
                            .addHeader("content-type", "application/x-www-form-urlencoded")
                            .build();
                    okHttpClient.newCall(request).enqueue(new Callback() {
                        @Override
                        public void onFailure(Call call, IOException e) {

                        }

                        @Override
                        public void onResponse(Call call, Response response) throws IOException {
                            try {
                                Gson gson = new Gson();
                                versionUpdate = gson.fromJson(response.body().string(), VersionUpdate.class);
                                //判断是否需要更新
                                if (versionUpdate.getResponse().isNeedUpdate()) {
                                    handler.sendEmptyMessage(2);
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    });
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }

    public void saveState() {
        SharedPreferences sharedPreferences = getSharedPreferences("state", Context.MODE_PRIVATE);
        editorss = sharedPreferences.edit();
        editorss.putBoolean("state", true);
        editorss.commit();//提交
    }

    public boolean getState() {
        SharedPreferences shared = getSharedPreferences("state", Context.MODE_PRIVATE);
        return shared.getBoolean("state", false);
    }

    public void customevent(final String email, final String appid) {
        try {
            //自定义事件返回
            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        final JSONObject json = new JSONObject();
                        json.put("siteid", "0zoTLi29XRgq");
                        json.put("zzid", "0zoTLha93ySI");//广告活动编号
                        json.put("appid", appid);//应用编号
                        TelephonyManager telephonyManager = (TelephonyManager) getSystemService(LoginActivity.this.TELEPHONY_SERVICE);
                        String imei = telephonyManager.getDeviceId();
//                        json.put("deviceid", imei);//设备编号
                        json.put("imei", imei);
                        json.put("idfa", "");
                        json.put("idfy", "");
                        json.put("who", email);
                        json.put("what", "用户登录");
                        json.put("eventdesc", BaseUrl.BaseVersion);
                        json.put("netword", NetWorkUtil.getNetworkType(LoginActivity.this));//联网方式
                        json.put("appzzid", "0zoTLi29XRgq");
                        json.put("os", 0);
                        OkHttpClient client = new OkHttpClient();
                        String url = null;
                        try {
                            url = json.toString();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
                        RequestBody body = RequestBody.create(mediaType, url);
                        final Request request = new Request.Builder()
                                .url(BaseUrl.BaseJiang + "customevent")
                                .addHeader("apiid", "0zoTLi29XRgq")
                                .addHeader("token", URLEncoder.encode(Token.gettoken2(), "utf-8"))
                                .addHeader("content-type", "application/x-www-form-urlencoded")
                                .post(body)
                                .build();

                        client.newCall(request).enqueue(new Callback() {
                            @Override
                            public void onFailure(Call call, IOException e) {
                                Log.i("response", "自定义事件返回：" + e.toString());
                            }

                            @Override
                            public void onResponse(Call call, Response response) throws IOException {
                                Log.i("response", "自定义事件返回：" + response.body().string());
                            }
                        });

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }).start();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void startApp(final boolean bol, final String appid) {
        try {
            //记录打开APP
            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        final JSONObject json = new JSONObject();
                        json.put("siteid", "0zoTLi29XRgq");
                        json.put("zzid", "0zoTLha93ySI");//广告活动编号
                        json.put("appid", appid);//应用编号
                        TelephonyManager telephonyManager = (TelephonyManager) getSystemService(LoginActivity.this.TELEPHONY_SERVICE);
                        String imei = telephonyManager.getDeviceId();
                        json.put("deviceid", imei);//设备编号
                        json.put("imei", imei);
                        json.put("term", android.os.Build.MODEL);//机型
                        json.put("idfa", "");
                        json.put("idfy", "");
                        json.put("channelid", "");//渠道id
                        json.put("install", bol);
                        TimeZone tz = TimeZone.getDefault();
                        String strTz = tz.getDisplayName(false, TimeZone.SHORT);
                        json.put("tx", strTz);//时区
                        json.put("devicetype", Build.MODEL);//设备类型
                        json.put("op", getSimOperatorInfo());//运营商
                        json.put("netword", NetWorkUtil.getNetworkType(LoginActivity.this));//联网方式
                        json.put("os", 0);
                        json.put("appzzid", "0zoTLi29XRgq");
                        OkHttpClient client = new OkHttpClient();
                        String url = null;
                        try {
                            url = json.toString();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
                        RequestBody body = RequestBody.create(mediaType, url);
                        final Request request = new Request.Builder()
                                .url(BaseUrl.BaseJiang + "startup")
                                .addHeader("apiid", "0zoTLi29XRgq")
                                .addHeader("token", URLEncoder.encode(Token.gettoken2(), "utf-8"))
                                .addHeader("content-type", "application/x-www-form-urlencoded")
                                .post(body)
                                .build();

                        client.newCall(request).enqueue(new Callback() {
                            @Override
                            public void onFailure(Call call, IOException e) {
                                Log.i("response", "打开APP返回：" + e.toString());
                            }

                            @Override
                            public void onResponse(Call call, Response response) throws IOException {
                                Log.i("response", "打开APP返回：" + response.body().string());
                            }
                        });

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }).start();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    //获取运营商
    public String getSimOperatorInfo() {
        TelephonyManager telephonyManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
        String operatorString = telephonyManager.getSimOperator();

        if (operatorString == null) {
            return "未知";
        }

        if (operatorString.equals("46000") || operatorString.equals("46002")) {
            //中国移动
            return "中国移动";
        } else if (operatorString.equals("46001")) {
            //中国联通
            return "中国联通";
        } else if (operatorString.equals("46003")) {
            //中国电信
            return "中国电信";
        }
        //error
        return "未知";
    }

    public void getPermissions() {
        try {
            //判断是否为android6.0系统版本，如果是，需要动态添加权限
            if (Build.VERSION.SDK_INT >= 23) {
                if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION)
                        != PackageManager.PERMISSION_GRANTED
                        || ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
                        != PackageManager.PERMISSION_GRANTED
                        || ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE)
                        != PackageManager.PERMISSION_GRANTED
                        || ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE)
                        != PackageManager.PERMISSION_GRANTED
                        || ActivityCompat.checkSelfPermission(this, Manifest.permission.CALL_PHONE)
                        != PackageManager.PERMISSION_GRANTED
                        || ActivityCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)
                        != PackageManager.PERMISSION_GRANTED) {
                    ToastUtils.showShort(this, "没有权限,请手动开启定位权限");
                    // 申请一个（或多个）权限，并提供用于回调返回的获取码（用户定义）
                    ActivityCompat.requestPermissions(LoginActivity.this, new String[]{Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.READ_PHONE_STATE, Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.CALL_PHONE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, STORAGE_PERMISSIONS_REQUEST_CODE);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        doNext(requestCode, grantResults);
    }

    private void doNext(int requestCode, int[] grantResults) {
        switch (requestCode) {
            //调用系统相册申请Sdcard权限回调
            case STORAGE_PERMISSIONS_REQUEST_CODE:
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    // 获取到权限，作相应处理（调用定位SDK应当确保相关权限均被授权，否则可能引起定位失败）
                    Permissions = true;//如果打开了权限就为true
                } else {
                    // 没有获取到权限，做特殊处理
                    ToastUtils.showShort(this, "获取位置权限失败，请手动开启");
                    Permissions = false;//如果没有打开权限就为false，根据这个值来判断接口执不执行
                }
                break;
            case INSTALL_PACKAGES_REQUESTCODE:
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                } else {
                    Intent intent = new Intent(Settings.ACTION_MANAGE_UNKNOWN_APP_SOURCES);
                    startActivityForResult(intent, GET_UNKNOWN_APP_SOURCES);
                }
                break;
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        switch (requestCode) {
            case GET_UNKNOWN_APP_SOURCES:
                break;

            default:
                break;
        }
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.iv_emal:
                et_username.setText("");
                iv_emal.setVisibility(View.GONE);
                break;
            case R.id.iv_pwd:
                et_password.setText("");
                iv_pwd.setVisibility(View.GONE);
                break;
        }
    }
}
