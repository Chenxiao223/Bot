package com.zhiziyun.dmptest.bot.ui.activity;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.support.annotation.RequiresApi;
import android.text.TextUtils;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

import com.google.gson.Gson;
import com.zhiziyun.dmptest.bot.R;
import com.zhiziyun.dmptest.bot.entity.WifiCrowd;
import com.zhiziyun.dmptest.bot.ui.fragment.WifiCrowdFragment;
import com.zhiziyun.dmptest.bot.util.BaseUrl;
import com.zhiziyun.dmptest.bot.util.MyDialog;
import com.zhiziyun.dmptest.bot.util.SelfDialog;
import com.zhiziyun.dmptest.bot.util.ToastUtils;
import com.zhiziyun.dmptest.bot.util.Token;
import com.zhiziyun.dmptest.bot.wifi_probe.WifiProbeManager;

import org.json.JSONObject;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * Created by Administrator on 2018/5/9.
 * 添加wifi人群和编辑添加wifi人群共用
 */

public class AddWifiCorwdActivity extends BaseActivity implements View.OnClickListener {
    private SharedPreferences share;
    private EditText edit_name;
    private String m_mac = "";
    private MyDialog dialog;
    private ListView mWifi_list;
    //wifi探针
    private int WiFi_time = 30 * 1000;//30秒扫描一次
    private List<String> mMacList = new ArrayList<>(); //存放mac的集合
    private ArrayAdapter<String> mAdapter;
    private WifiProbeManager mProbe;
    private Timer mTimer;
    private Intent intent;
    private TextView tv_title, tv_num;
    private Button btn_commit;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_wifi_corwd);
        initView();
    }

    private void initView() {
        //设置系统栏颜色
        ImageView iv_system = (ImageView) findViewById(R.id.iv_system);
        LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) iv_system.getLayoutParams();
        params.height = (int) getStatusBarHeight(this);//设置当前控件布局的高度

        intent = getIntent();
        share = getSharedPreferences("logininfo", Context.MODE_PRIVATE);
        dialog = MyDialog.showDialog(this);
        tv_title = findViewById(R.id.tv_title);
        mProbe = new WifiProbeManager();





        btn_commit = findViewById(R.id.btn_commit);
        btn_commit.setOnClickListener(this);
        findViewById(R.id.iv_back).setOnClickListener(this);
        edit_name = (EditText) findViewById(R.id.edit_name);
        tv_num = findViewById(R.id.tv_num);

        mWifi_list = (ListView) findViewById(R.id.list_wifi);
        mAdapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, mMacList);
        mWifi_list.setAdapter(mAdapter);

        if (intent.getIntExtra("flag", 0) == 123) {
            tv_title.setText("编辑wifi探测人群");
            btn_commit.setText("重新探测");
            getWifiCorwd();
        } else {
            if (!isWifiConnected(this)) {
                ToastUtils.showShort(this, "请连接wifi");
            } else {
                initScan();
            }
        }
    }

    /**
     * 在一定时间内进行扫描（也就是读取文件夹内的mac地址）
     */
    private void initScan() {
        mTimer = new Timer();
        mTimer.schedule(new TimerTask() {
            @Override
            public void run() {
                startScan();
            }
        }, 0, WiFi_time);
    }

    //获取SSID
    public String getSsid() {
        WifiManager wifi = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);
        WifiInfo info = wifi.getConnectionInfo();
        if (info != null && info.getMacAddress() != null) {
            return info.getSSID().replace("\"", "");//得到字符串去掉双引号
        }
        return "";
    }

    /**
     * 开始扫描 ， 如果wifi断开了数据就会没有了 ， 如果wifi地址变了内容也会变的
     */
    private void startScan() {
        mProbe.startScan(new WifiProbeManager.MacListListener() {
            @Override
            public void macList(final List<String> macList) {
                //因为在线程中进行扫描的，所以要切换到主线程
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            List list = new ArrayList();
                            list.addAll(getNewList(macList, mMacList));
                            mMacList.clear();
                            mMacList.addAll(list);
                            mAdapter.notifyDataSetChanged();
                            Message msg = new Message();
                            msg.what = 5;
                            msg.obj = mMacList.size();
                            handler.sendMessage(msg);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                });
            }
        });
    }

    //去重,第一个参数是存在重复值的集合，第二个参数是得到的新的不存在重复的集合
    public List getNewList(List<String> list, List<String> arr) {
        for (int i = 0; i < list.size(); i++) {
            if (!arr.contains(list.get(i))) {
                arr.add(list.get(i));
            }
        }
        return arr;
    }


    public String getMac() {
        m_mac = "";
        for (int i = 0; i < mMacList.size(); i++) {
            m_mac += mMacList.get(i) + ",";
        }
        return m_mac;
    }

    public void getWifiCorwd() {
        //获取指定WIFI人群
        new Thread(new Runnable() {
            @RequiresApi(api = 26)
            @Override
            public void run() {
                try {
                    final JSONObject json = new JSONObject();
                    json.put("id", intent.getIntExtra("id", -333));
                    OkHttpClient client = new OkHttpClient();
                    String url = null;
                    try {
                        url = "agentid=1&token=" + URLEncoder.encode(Token.gettoken(), "utf-8") + "&json=" + json.toString();
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                    MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
                    RequestBody body = RequestBody.create(mediaType, url);
                    final Request request = new Request.Builder()
                            .url(BaseUrl.BaseTest + "wifiSegmentInfo/select")
                            .post(body)
                            .addHeader("content-type", "application/x-www-form-urlencoded")
                            .build();

                    client.newCall(request).enqueue(new Callback() {
                        @Override
                        public void onFailure(Call call, IOException e) {

                        }

                        @Override
                        public void onResponse(Call call, Response response) throws IOException {
                            try {
                                Gson gson = new Gson();
                                Message message = new Message();
                                message.what = 4;
                                message.obj = gson.fromJson(response.body().string(), WifiCrowd.class);
                                handler.sendMessage(message);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    });

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }

    public void addWifiCorwd() {
        //加载动画
        dialog.show();
        //新增wifi人群
        new Thread(new Runnable() {
            @RequiresApi(api = 26)
            @Override
            public void run() {
                try {
                    final JSONObject json = new JSONObject();
                    json.put("siteId", share.getString("siteid", ""));
                    json.put("name", edit_name.getText().toString());
                    json.put("mac", getMac().replace(":", ""));
                    json.put("userId", share.getString("userid", ""));
                    json.put("userName", share.getString("userName", ""));
                    json.put("ssid", getSsid());
                    OkHttpClient client = new OkHttpClient();
                    String url = null;
                    try {
                        url = "agentid=1&token=" + URLEncoder.encode(Token.gettoken(), "utf-8") + "&json=" + json.toString();
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                    MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
                    RequestBody body = RequestBody.create(mediaType, url);
                    final Request request = new Request.Builder()
                            .url(BaseUrl.BaseTest + "wifiSegmentInfo/insert")
                            .post(body)
                            .addHeader("content-type", "application/x-www-form-urlencoded")
                            .build();

                    client.newCall(request).enqueue(new Callback() {
                        @Override
                        public void onFailure(Call call, IOException e) {

                        }

                        @Override
                        public void onResponse(Call call, Response response) throws IOException {
                            try {
                                Message message = new Message();
                                JSONObject jsonObject = new JSONObject(response.body().string());
                                if (jsonObject.get("success").toString().equals("true")) {
                                    message.what = 2;
                                    message.obj = jsonObject.get("msg").toString();
                                } else {
                                    message.what = 3;
                                    message.obj = jsonObject.get("msg").toString();
                                }
                                handler.sendMessage(message);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        }
                    });

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }

    public void editWifiCorwd(final int id) {
        //加载动画
        dialog.show();
        //修改/追加mac
        new Thread(new Runnable() {
            @RequiresApi(api = 26)
            @Override
            public void run() {
                try {
                    final JSONObject json = new JSONObject();
                    json.put("id", id);
                    json.put("name", edit_name.getText().toString());
                    json.put("mac", getMac().replace(":", ""));
                    json.put("userId", share.getString("userid", ""));
                    json.put("userName", share.getString("userName", ""));
                    json.put("ssid", getSsid());
                    OkHttpClient client = new OkHttpClient();
                    String url = null;
                    try {
                        url = "agentid=1&token=" + URLEncoder.encode(Token.gettoken(), "utf-8") + "&json=" + json.toString();
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                    MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
                    RequestBody body = RequestBody.create(mediaType, url);
                    final Request request = new Request.Builder()
                            .url(BaseUrl.BaseTest + "wifiSegmentInfo/update")
                            .post(body)
                            .addHeader("content-type", "application/x-www-form-urlencoded")
                            .build();

                    client.newCall(request).enqueue(new Callback() {
                        @Override
                        public void onFailure(Call call, IOException e) {

                        }

                        @Override
                        public void onResponse(Call call, Response response) throws IOException {
                            try {
                                Message message = new Message();
                                JSONObject jsonObject = new JSONObject(response.body().string());
                                if (jsonObject.get("success").toString().equals("true")) {
                                    message.what = 2;
                                    message.obj = jsonObject.get("msg").toString();
                                } else {
                                    message.what = 3;
                                    message.obj = jsonObject.get("msg").toString();
                                }
                                handler.sendMessage(message);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        }
                    });

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }

    Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case 1:
                    break;
                case 2:
                    //刷新数据
                    WifiCrowdFragment.wifiCrowdFragment.clearAllData();
                    WifiCrowdFragment.wifiCrowdFragment.getData(1, "");
                    ToastUtils.showShort(AddWifiCorwdActivity.this, msg.obj.toString());
                    dialog.dismiss();
                    toFinish();
                    finish();
                    break;
                case 3:
                    ToastUtils.showShort(AddWifiCorwdActivity.this, msg.obj.toString());
                    dialog.dismiss();
                    break;
                case 4:
                    try {
                        WifiCrowd wifiCrowd = (WifiCrowd) msg.obj;
                        edit_name.setText(wifiCrowd.getObj().getName());
                        edit_name.setSelection(wifiCrowd.getObj().getName().length());
                        List<String> list = Arrays.asList(wifiCrowd.getObj().getMac().split(","));
                        mMacList.addAll(list);
                        mAdapter.notifyDataSetChanged();
                        tv_num.setText("已包含设备：" + mMacList.size() + "个");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    break;
                case 5:
                    try {
                        tv_num.setText("已扫描设备：" + msg.obj + "个");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    break;
            }
        }
    };

    @Override
    protected void onResume() {
        super.onResume();
        if (!isWifiConnected(this)) {
            ToastUtils.showShort(this, "请连接wifi");
        }
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.iv_back:
                toFinish();
                finish();
                break;
            case R.id.btn_commit:
                if (intent.getIntExtra("flag", 0) == 123) {
                    if (btn_commit.getText().toString().equals("重新探测")) {
                        if (!isWifiConnected(this)) {//判断是否连接了wifi
                            final SelfDialog selfDialog = new SelfDialog(AddWifiCorwdActivity.this);
                            selfDialog.setTitle("消息提示");
                            selfDialog.setMessage("请连接wifi");
                            selfDialog.setYesOnclickListener("知道了", new SelfDialog.onYesOnclickListener() {
                                @Override
                                public void onYesClick() {
                                    selfDialog.dismiss();
                                }
                            });
                            selfDialog.show();
                        } else {
                            btn_commit.setText("提交");
                            initScan();//扫描
                        }
                    } else {
                        editWifiCorwd(intent.getIntExtra("id", -333));
                    }
                } else {
                    if (TextUtils.isEmpty(edit_name.getText().toString())) {
                        ToastUtils.showShort(AddWifiCorwdActivity.this, "请输入名称");
                    } else {
                        if (isWifiConnected(this)) {//判断是否连接wifi
                            addWifiCorwd();
                        } else {
                            ToastUtils.showShort(this, "请连接wifi");
                        }
                    }
                }
                break;
        }
    }

    //是否连接WIFI
    public static boolean isWifiConnected(Context context) {
        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo wifiNetworkInfo = connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
        if (wifiNetworkInfo.isConnected()) {
            return true;
        }
        return false;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        try {
            mTimer.cancel();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onBackPressed() {
        toFinish();
        finish();
    }

    //清空内存
    private void toFinish() {
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                try {
                    mMacList.clear();
                    edit_name = null;
                    m_mac = "";
                    System.gc();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }, 500);
    }
}
