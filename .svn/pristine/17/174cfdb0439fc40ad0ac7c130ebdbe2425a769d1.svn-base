package com.zhiziyun.dmptest.bot.ui.activity;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.view.Gravity;
import android.view.View;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.PopupWindow;

import com.google.gson.Gson;
import com.scwang.smartrefresh.layout.SmartRefreshLayout;
import com.scwang.smartrefresh.layout.api.RefreshLayout;
import com.scwang.smartrefresh.layout.listener.OnLoadmoreListener;
import com.scwang.smartrefresh.layout.listener.OnRefreshListener;
import com.umeng.analytics.MobclickAgent;
import com.zhiziyun.dmptest.bot.R;
import com.zhiziyun.dmptest.bot.adapter.StoreListAdapter;
import com.zhiziyun.dmptest.bot.entity.StoreList;
import com.zhiziyun.dmptest.bot.util.BaseUrl;
import com.zhiziyun.dmptest.bot.util.ClickUtils;
import com.zhiziyun.dmptest.bot.util.MyDialog;
import com.zhiziyun.dmptest.bot.util.ToastUtils;
import com.zhiziyun.dmptest.bot.util.Token;
import com.zhiziyun.dmptest.bot.view.PopWin_store;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * Created by Administrator on 2017/12/5.
 * 门店列表列
 */

public class StoreListActivity extends BaseActivity implements View.OnClickListener {
    public static StoreListActivity storeListActivity;
    private SharedPreferences share;
    private StoreList storeList;
    private ListView lv_store;
    private StoreListAdapter adapter;
    private HashMap<String, String> hm_store;
    public ArrayList<HashMap<String, String>> list_store = new ArrayList<>();
    private SmartRefreshLayout smartRefreshLayout;
    private int pageNum = 1;
    private MyDialog dialog;
    private LinearLayout line_page;
    public int flag = 0;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_storelist);
        initView();
    }

    public void onPause() {
        super.onPause();
        MobclickAgent.onPause(this);
    }

    @Override
    protected void onResume() {
        super.onResume();
        MobclickAgent.onResume(this);
        try {
            if (hm_store == null) {//根据这个值来判断是第一次进来还是第二次进来
                //加载动画
                dialog = MyDialog.showDialog(this);
                dialog.show();
                getstoreList(1, "");//第二个参数为空就是查所有
            } else {//第二次
                if (flag == 0) {
                    dialog.show();
                    hm_store.clear();
                    clearAllData();
                    getstoreList(pageNum, "");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void clearAllData() {
        pageNum = 1;
        list_store.clear();
    }

    private void initView() {
        //设置系统栏颜色
        ImageView iv_system = (ImageView) findViewById(R.id.iv_system);
        LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) iv_system.getLayoutParams();
        params.height = (int) getStatusBarHeight(this);//设置当前控件布局的高度

        storeListActivity = this;
        share = getSharedPreferences("logininfo", Context.MODE_PRIVATE);
        smartRefreshLayout = (SmartRefreshLayout) findViewById(R.id.refreshLayout);
        line_page = findViewById(R.id.line_page).findViewById(R.id.line_page);
        line_page.setOnClickListener(this);
        findViewById(R.id.iv_back).setOnClickListener(this);
        findViewById(R.id.iv_addstory).setOnClickListener(this);
        findViewById(R.id.iv_search).setOnClickListener(this);
        lv_store = (ListView) findViewById(R.id.lv_store);
        adapter = new StoreListAdapter(this, list_store);
        lv_store.setAdapter(adapter);
        //点击列表
        lv_store.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                //隐藏软键盘
                InputMethodManager imm4 = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                imm4.hideSoftInputFromWindow(view.getWindowToken(), 0);
                //让背景变暗
                WindowManager.LayoutParams lp3 = getWindow().getAttributes();
                lp3.alpha = 0.7f;
                getWindow().setAttributes(lp3);
                getWindow().setAttributes(lp3);
                //弹出pop窗体
                PopWin_store popWin_store = new PopWin_store(StoreListActivity.this, list_store, position);
                popWin_store.showAtLocation(findViewById(R.id.traceroute_rootview), Gravity.BOTTOM, 0, 0);//125
                //监听popwin是否关闭，关闭的话让背景恢复
                popWin_store.setOnDismissListener(new PopupWindow.OnDismissListener() {
                    @Override
                    public void onDismiss() {
                        WindowManager.LayoutParams lp3 = getWindow().getAttributes();
                        lp3.alpha = 1f;
                        getWindow().setAttributes(lp3);
                    }
                });
            }
        });
        //下拉刷新
        smartRefreshLayout.setOnRefreshListener(new OnRefreshListener() {
            @Override
            public void onRefresh(RefreshLayout refreshlayout) {
                try {
                    hm_store.clear();
                    clearAllData();
                    getstoreList(pageNum, "");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
        //上拉加载
        smartRefreshLayout.setOnLoadmoreListener(new OnLoadmoreListener() {
            @Override
            public void onLoadmore(RefreshLayout refreshlayout) {
                try {
                    if ((storeList.getTotal() - (pageNum - 1) * 10) > 0) {
                        getstoreList(pageNum, "");
                        ToastUtils.showShort(StoreListActivity.this, pageNum + "/" + ((storeList.getTotal() / 10) + 1));
                    } else {
                        ToastUtils.showShort(StoreListActivity.this, "最后一页了");
                        smartRefreshLayout.finishLoadmore(0);//停止刷新
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
        findViewById(R.id.traceroute_rootview).setOnClickListener(this);
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.iv_search:
                Intent it = new Intent(this, SearchPageActivity.class);
                it.putExtra("activity", "StoreListActivity");
                startActivity(it);
                break;
            case R.id.iv_back:
                toFinish();
                finish();
                break;
            case R.id.iv_addstory:
                startActivity(new Intent(this, AddStoryActivity.class));
                break;
            case R.id.traceroute_rootview:
                //让软键盘隐藏
                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                imm.hideSoftInputFromWindow(view.getApplicationWindowToken(), 0);
                break;
            case R.id.line_page:
                try {
                    if (ClickUtils.isFastClick()) {
                        hm_store.clear();
                        clearAllData();
                        getstoreList(pageNum, "");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                break;
        }
    }

    //第二个参数为空就是查所有
    public void getstoreList(final int page, final String name) {
        //获取门店列表
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    final JSONObject json = new JSONObject();
                    json.put("siteId", share.getString("siteid", ""));
                    json.put("page", page);
                    json.put("rows", 10);
                    json.put("name", name);
                    json.put("sort", "updateTime");
                    json.put("order", "desc");
                    OkHttpClient client = new OkHttpClient();
                    String url = null;
                    try {
                        url = "agentid=1&token=" + URLEncoder.encode(Token.gettoken(), "utf-8") + "&json=" + json.toString();

                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                    MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
                    RequestBody body = RequestBody.create(mediaType, url);
                    final Request request = new Request.Builder()
                            .url(BaseUrl.BaseTest + "store/list")
                            .post(body)
                            .addHeader("content-type", "application/x-www-form-urlencoded")
                            .build();

                    client.newCall(request).enqueue(new Callback() {
                        @Override
                        public void onFailure(Call call, IOException e) {

                        }

                        @Override
                        public void onResponse(Call call, Response response) throws IOException {
                            try {
                                Gson gson = new Gson();
                                storeList = gson.fromJson(response.body().string(), StoreList.class);
                                handler.sendEmptyMessage(1);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }

    Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case 1:
                    try {
                        if (storeList != null) {
                            if (storeList.getRows().size() == 0) {
                                line_page.setVisibility(View.VISIBLE);
                                ToastUtils.showShort(StoreListActivity.this, "无数据");
                                smartRefreshLayout.finishRefresh(0);//停止刷新
                                smartRefreshLayout.finishLoadmore(0);//停止加载
                                dialog.dismiss();
                            } else {
                                for (int i = 0; i < storeList.getRows().size(); i++) {
                                    hm_store = new HashMap<>();
                                    hm_store.put("content1", storeList.getRows().get(i).getName());
                                    hm_store.put("content3", storeList.getRows().get(i).getProbeCount());
                                    String area = storeList.getRows().get(i).getArea();
                                    double r = Double.parseDouble(area) / Math.PI;//根据面积计算出半径的平方
                                    double radius = Math.round(Math.sqrt(r));//根据半径的平方计算半径（平方根）
                                    hm_store.put("content2", "" + radius);//以前显示面积，现在显示半径
                                    hm_store.put("lat", storeList.getRows().get(i).getLatitude());
                                    hm_store.put("lon", storeList.getRows().get(i).getLongitude());
                                    hm_store.put("id", String.valueOf(storeList.getRows().get(i).getId()));
                                    hm_store.put("area", storeList.getRows().get(i).getArea());
                                    list_store.add(hm_store);
                                }
                                pageNum++;
                                line_page.setVisibility(View.GONE);
                            }
                            adapter.notifyDataSetChanged();
                            smartRefreshLayout.finishRefresh(0);//停止刷新
                            smartRefreshLayout.finishLoadmore(0);//停止加载
                            dialog.dismiss();
                        } else {
                            line_page.setVisibility(View.VISIBLE);
                            ToastUtils.showShort(StoreListActivity.this, "无数据");
                            smartRefreshLayout.finishRefresh(0);//停止刷新
                            smartRefreshLayout.finishLoadmore(0);//停止加载
                            dialog.dismiss();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    break;
                case 2:
                    try {
                        hm_store.clear();
                        clearAllData();
                        dialog.show();
                        getstoreList(pageNum, "");
                        ToastUtils.showShort(StoreListActivity.this, String.valueOf(msg.obj));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    break;
            }
        }
    };

    public void editeStore(String name, String area, String lat, String lon, String id) {
        Intent it = new Intent(this, EditeStoryActivity.class);
        it.putExtra("name", name);
        it.putExtra("area", area);
        it.putExtra("lat", lat);
        it.putExtra("lon", lon);
        it.putExtra("id", id);
        startActivity(it);
    }

    public void deleteStore(final String id) {
        //删除门店接口
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    final JSONObject json = new JSONObject();
                    json.put("siteId", share.getString("siteid", ""));
                    json.put("id", id);
                    OkHttpClient client = new OkHttpClient();
                    String url = null;
                    try {
                        url = "agentid=1&token=" + URLEncoder.encode(Token.gettoken(), "utf-8") + "&json=" + json.toString();
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                    MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
                    RequestBody body = RequestBody.create(mediaType, url);
                    final Request request = new Request.Builder()
                            .url(BaseUrl.BaseTest + "store/delete")
                            .post(body)
                            .addHeader("content-type", "application/x-www-form-urlencoded")
                            .build();

                    client.newCall(request).enqueue(new Callback() {
                        @Override
                        public void onFailure(Call call, IOException e) {

                        }

                        @Override
                        public void onResponse(Call call, Response response) throws IOException {
                            try {
                                JSONObject jsonObject = new JSONObject(response.body().string());
                                Message message = new Message();
                                message.what = 2;
                                message.obj = jsonObject.get("msg");
                                handler.sendMessage(message);
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }

                        }
                    });

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }

    public void checkTanzhen(String id, float lat, float lon, String area, String stores) {
        Intent it = new Intent(this, TanzhenListActivity.class);
        it.putExtra("id", id);
        it.putExtra("lat", lat);
        it.putExtra("lon", lon);
        it.putExtra("area", area);
        it.putExtra("stores", stores);
        startActivity(it);
    }

    @Override
    public void onBackPressed() {
        toFinish();
        finish();
    }

    //清空内存
    private void toFinish() {
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                try {
                    share = null;
                    storeList = null;
                    lv_store.setAdapter(null);
                    adapter = null;
                    list_store.clear();
                    smartRefreshLayout = null;
                    hm_store.clear();
                    System.gc();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }, 500);
    }
}
