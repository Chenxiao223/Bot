package com.zhiziyun.dmptest.bot.mode.wifi;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.view.Gravity;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.zhiziyun.dmptest.bot.R;
import com.zhiziyun.dmptest.bot.mode.wifi.store.AddWifiCase;
import com.zhiziyun.dmptest.bot.mode.wifi.store.BStoreResult;
import com.zhiziyun.dmptest.bot.mode.wifi.store.SceneWifiCase;
import com.zhiziyun.dmptest.bot.mode.wifi.store.SingleWifiCase;
import com.zhiziyun.dmptest.bot.mode.wifi.store.StoreCase;
import com.zhiziyun.dmptest.bot.network.subscriber.PureSubscriber;
import com.zhiziyun.dmptest.bot.ui.activity.BaseActivity;
import com.zhiziyun.dmptest.bot.ui.activity.ChooseEquipmentActivity;
import com.zhiziyun.dmptest.bot.ui.activity.WebShowActivity;
import com.zhiziyun.dmptest.bot.ui.fragment.WIFIADFragment;
import com.zhiziyun.dmptest.bot.util.EditDialog2;
import com.zhiziyun.dmptest.bot.util.IsEmpty;
import com.zhiziyun.dmptest.bot.util.ToastUtils;
import com.zhiziyun.dmptest.bot.util.Token;
import com.zhiziyun.dmptest.bot.view.PopWin_Launch;
import com.zhiziyun.dmptest.bot.widget.CustomBackToolbar;

import org.json.JSONObject;

import java.net.URLEncoder;


public class WifiAdverActivity extends BaseActivity implements View.OnClickListener {
    public static WifiAdverActivity wifiAdverActivity;
    private CustomBackToolbar mToolbar;
    private TextView mChooseStore;
    public TextView mChooseThrow;
    private TextView mTestPreview;
    private EditText mWifiAdvertname;
    private final int FLAG = 4322;
    private String m_equipment;//设备
    private SharedPreferences share;
    private String mId, mStoreId, mSsid, mShopname;
    private Button mCommitBt;
    private String mFirststoreId;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_wifi_adver);
        share = getSharedPreferences("logininfo", Context.MODE_PRIVATE);
        wifiAdverActivity = this;
        ImageView iv_system = (ImageView) findViewById(R.id.iv_system);
        RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) iv_system.getLayoutParams();
        params.height = (int) getStatusBarHeight(this);//设置当前控件布局的高度
        mToolbar = findViewById(R.id.customBackToolbar);
        mToolbar.getmRightTv().setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(WifiAdverActivity.this, WebShowActivity.class);
                intent.putExtra("flag", 2);
                startActivity(intent);
            }
        });
        mChooseStore = findViewById(R.id.choose_store_et);
        mChooseThrow = findViewById(R.id.choose_throw_et);
        mTestPreview = findViewById(R.id.test_preview_tv);
        mWifiAdvertname = findViewById(R.id.edit_wifi_advert);
        mCommitBt = findViewById(R.id.commit_bt);
        setOnclik();
        loadData();
    }

    public void setOnclik() {
        mChooseStore.setOnClickListener(this);
        mChooseThrow.setOnClickListener(this);
        mTestPreview.setOnClickListener(this);
        mCommitBt.setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.choose_store_et:
                Intent intent = new Intent(WifiAdverActivity.this, ChooseStoreActivity.class);
                startActivityForResult(intent, 11);
                break;
            case R.id.choose_throw_et:
                //让背景变暗
                WindowManager.LayoutParams lp = getWindow().getAttributes();
                lp.alpha = 0.7f;
                getWindow().setAttributes(lp);
                getWindow().setAttributes(lp);
                //弹出窗体
                PopWin_Launch popWin_launch = new PopWin_Launch(WifiAdverActivity.this, null, 0);
                popWin_launch.showAtLocation(findViewById(R.id.main_view), Gravity.BOTTOM, 0, 0);//125
                //监听popwin是否关闭，关闭的话让背景恢复
                popWin_launch.setOnDismissListener(new PopupWindow.OnDismissListener() {
                    @Override
                    public void onDismiss() {
                        WindowManager.LayoutParams lp = getWindow().getAttributes();
                        lp.alpha = 1f;
                        getWindow().setAttributes(lp);
                    }
                });
//                popWin_launch.setFocusable(true);
                break;
            case R.id.test_preview_tv:
                final EditDialog2 editDialog = new EditDialog2(this);
                editDialog.setTitle("输入接收广告的安卓手机信息");
                editDialog.setYesOnclickListener("确定", new EditDialog2.onYesOnclickListener() {
                    @Override
                    public void onYesClick(String ssid, String mac) {
                        if (ssid.isEmpty() || mac.isEmpty()) {
                            ToastUtils.showShort(WifiAdverActivity.this, "请输入数据");
                        } else {
                            //这里可以拿到name和mac
                            try {
                                if (!IsEmpty.string(mFirststoreId)) {
                                    JSONObject jsonObject = new JSONObject();
                                    jsonObject.put("shopId", mFirststoreId);
                                    jsonObject.put("tencentId", share.getString("tencentid", ""));
                                    jsonObject.put("mac", mac);
                                    jsonObject.put("name", "wifiTest");
                                    jsonObject.put("ssid", ssid);
                                    jsonObject.put("siteId", share.getString("siteid", ""));
                                    new SingleWifiCase(1, URLEncoder.encode(Token.gettoken(), "utf-8"), jsonObject.toString()).execute(new PureSubscriber() {
                                        @Override
                                        public void onFailure(Throwable throwable) {
                                            Toast.makeText(WifiAdverActivity.this, "发送失败", Toast.LENGTH_SHORT).show();
                                        }

                                        @Override
                                        public void onSuccess(Object data) {
                                            Toast.makeText(WifiAdverActivity.this, "发送成功", Toast.LENGTH_SHORT).show();
                                        }
                                    });
                                } else {
                                    Toast.makeText(WifiAdverActivity.this, "请登录微信公众号平台创建", Toast.LENGTH_SHORT).show();
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            editDialog.dismiss();
                        }
                    }
                });
                editDialog.setNoOnclickListener("取消", new EditDialog2.onNoOnclickListener() {
                    @Override
                    public void onNoClick() {
                        editDialog.dismiss();
                    }
                });
                editDialog.show();
                break;
            case R.id.commit_bt:
                if (IsEmpty.string(mWifiAdvertname.getText().toString()) || IsEmpty.string(mStoreId)) {
                    Toast.makeText(wifiAdverActivity, "广告活动名门店不能为空", Toast.LENGTH_SHORT).show();
                } else {
                    try {
                        JSONObject jsonObject = new JSONObject();
                        jsonObject.put("tencentId", share.getString("tencentid", ""));
                        jsonObject.put("shopId", Integer.valueOf(mStoreId));
                        jsonObject.put("name", mWifiAdvertname.getText().toString());
                        if (mChooseThrow.getText().equals("即时投放")) {
                            if (!IsEmpty.string(m_equipment)) {
                                jsonObject.put("macs", m_equipment);
                                jsonObject.put("ssid", mSsid);
                                jsonObject.put("siteId", share.getString("siteid", ""));
                                scan(jsonObject);
                            } else {
                                Toast.makeText(wifiAdverActivity, "投放方式不能为空", Toast.LENGTH_SHORT).show();
                            }
                        } else {
                            if (!IsEmpty.string(mId)) {
                                jsonObject.put("segmentId", mId);
                                wificrowned(jsonObject);
                            } else {
                                Toast.makeText(wifiAdverActivity, "投放方式不能为空", Toast.LENGTH_SHORT).show();
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                break;
        }
    }

    public void scan(JSONObject jsonObject) {
        try {
            new SceneWifiCase(1, URLEncoder.encode(Token.gettoken(), "utf-8"), jsonObject.toString()).execute(new PureSubscriber() {
                @Override
                public void onFailure(Throwable throwable) {
                    Toast.makeText(WifiAdverActivity.this, "提交失败", Toast.LENGTH_SHORT).show();
                }

                @Override
                public void onSuccess(Object data) {
                    //刷新列表
                    WIFIADFragment.fragment.clearAllData();
                    WIFIADFragment.fragment.getData(1, "");
                    finish();
                    Toast.makeText(WifiAdverActivity.this, "提交成功", Toast.LENGTH_SHORT).show();
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void wificrowned(JSONObject jsonObject) {
        try {
            new AddWifiCase(1, URLEncoder.encode(Token.gettoken(), "utf-8"), jsonObject.toString()).execute(new PureSubscriber() {
                @Override
                public void onFailure(Throwable throwable) {
                    Toast.makeText(WifiAdverActivity.this, "提交失败", Toast.LENGTH_SHORT).show();
                }

                @Override
                public void onSuccess(Object data) {
                    finish();
                    Toast.makeText(WifiAdverActivity.this, "提交成功", Toast.LENGTH_SHORT).show();
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //跳转
    public void jump() {
        Intent intent = new Intent(this, ChooseEquipmentActivity.class);
        startActivityForResult(intent, FLAG);
    }

    public void jump1() {
        Intent intent = new Intent(this, WifiCrowdActivity.class);
        startActivityForResult(intent, 13);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (data == null) {

        } else {
            switch (requestCode) {
                case FLAG:
                    try {
                        if (!data.getStringArrayListExtra("list").isEmpty()) {
                            m_equipment = "";//为了防止第二次进去选中回来后叠加，在这里归零
                            //以后用集合来接收这个集合
                            int num = data.getStringArrayListExtra("list").size();
                            //拼接字符串
                            for (int i = 0; i < num; i++) {
                                if (i == num - 1) {
                                    m_equipment += data.getStringArrayListExtra("list").get(i);
                                } else {
                                    m_equipment += data.getStringArrayListExtra("list").get(i) + ",";
                                }
                            }
                        }
//                    Log.i("infos", m_equipment);
                        if (!IsEmpty.string(m_equipment)) {
                            mChooseThrow.setText("即时投放");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    break;
                case 13:
                    mId = data.getStringExtra("id");
                    if (!IsEmpty.string(mId)) {
                        mChooseThrow.setText("Wi-Fi人群投放");
                    }
                    break;
                case 11:
                    mStoreId = data.getStringExtra("storeid");
                    mSsid = getSsid();
                    mShopname = data.getStringExtra("shopname");
                    if (!IsEmpty.string(String.valueOf(mStoreId))) {
                        mChooseStore.setText(mShopname);
                    }
                    break;
            }
        }
    }

    //获取SSID
    public String getSsid() {
        WifiManager wifi = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);
        WifiInfo info = wifi.getConnectionInfo();
        if (info != null && info.getMacAddress() != null) {
            return info.getSSID().replace("\"", "");//得到字符串去掉双引号
        }
        return "";
    }

    public void loadData() {
        try {
            JSONObject jsonObject = new JSONObject();
            jsonObject.put("tencentId", share.getString("tencentid", ""));
            jsonObject.put("paeg", 1);
            jsonObject.put("rows", 10);
            new StoreCase(1, URLEncoder.encode(Token.gettoken(), "utf-8"), jsonObject.toString()).execute(new PureSubscriber<BStoreResult>() {
                @Override
                public void onFailure(Throwable throwable) {
                }

                @Override
                public void onSuccess(BStoreResult data) {
                    if (!IsEmpty.string(data.getRows().get(0).getShop_id())) {
                        mFirststoreId = data.getRows().get(0).getShop_id();
                    }
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
